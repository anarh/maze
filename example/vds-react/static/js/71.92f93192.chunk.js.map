{"version":3,"sources":["components/card-expiration/select-options.js","components/card-expiration/options.js","components/card-expiration/render-component.js","components/card-expiration/expiration-month.js","components/card-expiration/expiration-year.js","components/card-expiration/index.js","components/card-expiration/example/index.js","pages/components/card-expiration.js"],"names":["SelectOptions","memo","list","map","item","idx","disabled","key","value","prevProp","nextProp","JSON","stringify","propTypes","arrayOf","shape","string","displayName","isDisabled","type","selectedMonth","selectedYear","result","isValidMonthYear","undefined","Options","defaultSelection","listType","options","RenderComponent","blurHandler","changeHandler","errorText","id","invalid","label","optionType","selectedItem","aria-label","aria-required","defaultValue","onBlur","onChange","showErrorText","func","bool","months","getMonths","ExpirationMonth","blurMonthField","labelForSelectMonth","placeholderForMonth","selectMonth","years","getYears","ExpirationYear","blurYearField","labelForSelectYear","placeholderForYear","selectYear","CardExpiration","className","css","delimiter","errorForEmptyFields","errorForInvalidMonth","errorForInvalidYear","formSubmitCounter","labelForFieldset","onBlurMonthHandler","onBlurYearHandler","onChangeMonthHandler","onChangeYearHandler","validateOnBlur","useState","emptyFields","setEmptyFields","selected","month","setMonth","year","setYear","useEffect","isError","invalidGroup","Boolean","classnames","legend","e","target","defaultProps","Formik","require","CardExpirationExample","tag","validate","values","errors","expiration","document","querySelector","focus","onSubmit","setSubmitting","setTimeout","alert","handleSubmit","isSubmitting","submitCount","autoComplete","console","log","lang","prettier","plugins","reactDocs","jsParsed","replace","exampleCode","remainingProps","componentProps","setComponentProps","parse","siblingOfStickyFooter","role","exact","to","process","activeClassName","name","resolution","match","path","theme","code","language","style","tokens","getLineProps","getTokenProps","line","i","display","opacity","userSelect","width","token","format","ReactDOMServer","renderToStaticMarkup","parser","printWidth","dividerLines","size","aria-sort","scope","props","Object","entries","filter","doc","description","required","length","color","Array","isArray","v","join"],"mappings":"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","file":"static/js/71.92f93192.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { arrayOf, shape, string } from 'prop-types';\n\n/**\n * @param {Object} Props\n * @returns {Node} React Component\n */\nconst SelectOptions = memo(\n  ({ list }) =>\n    list.map((item, idx) => (\n      <option disabled={item.disabled} key={idx} value={item.value}>\n        {item.value}\n      </option>\n    )),\n  (prevProp, nextProp) => !(JSON.stringify(prevProp.list) !== JSON.stringify(nextProp.list))\n);\n\nSelectOptions.propTypes = {\n  list: arrayOf(\n    shape({\n      disabled: string,\n      value: string\n    })\n  )\n};\n\nSelectOptions.displayName = 'SelectOptions';\n\nexport default SelectOptions;\n","import React, { Fragment, memo } from 'react';\nimport { arrayOf, string } from 'prop-types';\nimport SelectOptions from './select-options';\nimport { isValidMonthYear } from '@visa/ui-utils/lib/js/card-expiration';\n\nconst isDisabled = (type, item, selectedMonth, selectedYear) => {\n  let result;\n  if (type === 'MONTH') {\n    result = isValidMonthYear(item, selectedYear) ? undefined : 'disabled';\n  } else if (type === 'YEAR') {\n    result = isValidMonthYear(selectedMonth, item) ? undefined : 'disabled';\n  }\n\n  return result;\n};\n\n/**\n * @param {Object} Props\n * @returns {Node} React Component\n */\nconst Options = memo(({ defaultSelection, list, listType, selectedMonth, selectedYear }) => {\n  const options = list.map(item => ({\n    disabled: isDisabled(listType, item, selectedMonth, selectedYear),\n    value: item\n  }));\n  return (\n    <Fragment>\n      <option value=\"\" disabled>\n        {defaultSelection}\n      </option>\n      <SelectOptions list={options} />\n    </Fragment>\n  );\n});\n\nOptions.propTypes = {\n  defaultSelection: string,\n  list: arrayOf(string),\n  listType: string,\n  selectedMonth: string,\n  selectedYear: string\n};\n\nOptions.displayName = 'Options';\n\nexport default Options;\n","import React, { memo } from 'react';\nimport { arrayOf, bool, func, string } from 'prop-types';\nimport Select from '../select';\nimport Options from './options';\n\n/**\n * @param {object} Props\n * @returns {node} React Component\n */\nconst RenderComponent = memo(\n  ({\n    blurHandler,\n    changeHandler,\n    defaultSelection,\n    errorText,\n    id,\n    invalid,\n    label,\n    options,\n    optionType,\n    selectedItem,\n    selectedMonth,\n    selectedYear\n  }) => (\n    <Select\n      aria-label={label}\n      aria-required=\"true\"\n      defaultValue={selectedItem ? undefined : ''}\n      errorText={errorText}\n      id={id}\n      invalid={invalid}\n      onBlur={blurHandler}\n      onChange={changeHandler}\n      showErrorText\n      value={selectedItem}\n    >\n      <Options\n        defaultSelection={defaultSelection}\n        list={options}\n        listType={optionType}\n        selectedMonth={selectedMonth ? selectedMonth : undefined}\n        selectedYear={selectedYear ? selectedYear : undefined}\n      />\n    </Select>\n  )\n);\n\nRenderComponent.propTypes = {\n  blurHandler: func,\n  changeHandler: func,\n  defaultSelection: string,\n  errorText: string,\n  id: string,\n  invalid: bool,\n  label: string,\n  optionType: string,\n  options: arrayOf(string),\n  selectedItem: string,\n  selectedMonth: string,\n  selectedYear: string\n};\n\nRenderComponent.displayName = 'RenderComponent';\n\nexport default RenderComponent;\n","import React from 'react';\nimport { bool, func, string } from 'prop-types';\nimport RenderComponent from './render-component';\nimport { getMonths } from '@visa/ui-utils/lib/js/card-expiration';\n\nconst months = getMonths();\n\n/**\n * @param {object} Props\n * @returns {node} React Component\n */\nconst ExpirationMonth = ({\n  blurMonthField,\n  errorText,\n  id,\n  invalid,\n  labelForSelectMonth,\n  placeholderForMonth,\n  selectMonth,\n  selectedMonth,\n  selectedYear\n}) => (\n  <RenderComponent\n    blurHandler={blurMonthField}\n    changeHandler={selectMonth}\n    defaultSelection={placeholderForMonth}\n    errorText={errorText}\n    id={id}\n    invalid={invalid}\n    label={labelForSelectMonth}\n    options={months}\n    optionType=\"MONTH\"\n    selectedItem={selectedMonth}\n    selectedYear={selectedYear}\n  />\n);\n\nExpirationMonth.propTypes = {\n  blurMonthField: func,\n  errorText: string,\n  id: string,\n  invalid: bool,\n  labelForSelectMonth: string,\n  placeholderForMonth: string,\n  selectMonth: func,\n  selectedMonth: string,\n  selectedYear: string\n};\n\nexport default ExpirationMonth;\n","import React from 'react';\nimport { bool, func, string } from 'prop-types';\nimport RenderComponent from './render-component';\nimport { getYears } from '@visa/ui-utils/lib/js/card-expiration';\n\nconst years = getYears();\n\n/**\n * @param {object} Props\n * @returns {node} React Component\n */\nconst ExpirationYear = ({\n  blurYearField,\n  errorText,\n  id,\n  invalid,\n  labelForSelectYear,\n  placeholderForYear,\n  selectYear,\n  selectedMonth,\n  selectedYear\n}) => (\n  <RenderComponent\n    blurHandler={blurYearField}\n    changeHandler={selectYear}\n    defaultSelection={placeholderForYear}\n    errorText={errorText}\n    id={id}\n    invalid={invalid}\n    label={labelForSelectYear}\n    options={years}\n    optionType=\"YEAR\"\n    selectedItem={selectedYear}\n    selectedMonth={selectedMonth}\n  />\n);\n\nExpirationYear.propTypes = {\n  blurYearField: func,\n  errorText: string,\n  id: string,\n  invalid: bool,\n  labelForSelectYear: string,\n  placeholderForYear: string,\n  selectYear: func,\n  selectedMonth: string,\n  selectedYear: string\n};\n\nexport default ExpirationYear;\n","import React, { memo, useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport { bool, func, node, number, string } from 'prop-types';\nimport ExpirationMonth from './expiration-month';\nimport ExpirationYear from './expiration-year';\nimport SelectGroup from '../select-group';\nimport SelectGroupDelimiter from '../select-group-delimiter';\nimport { isValidMonthYear } from '@visa/ui-utils/lib/js/card-expiration';\n\nconst CSS_PREFIX = 'vds-card-expiration';\n\n/**\n * @param {object} Props\n * @returns {node} React Component\n */\nconst CardExpiration = memo(\n  ({\n    className,\n    css,\n    delimiter,\n    errorForEmptyFields,\n    errorForInvalidMonth,\n    errorForInvalidYear,\n    formSubmitCounter,\n    id,\n    labelForFieldset,\n    labelForSelectMonth,\n    labelForSelectYear,\n    onBlurMonthHandler,\n    onBlurYearHandler,\n    onChangeMonthHandler,\n    onChangeYearHandler,\n    placeholderForMonth,\n    placeholderForYear,\n    selectedMonth,\n    selectedYear,\n    validateOnBlur\n  }) => {\n    const [emptyFields, setEmptyFields] = useState();\n    const [month, setMonth] = useState({\n      errorText: undefined,\n      selected:\n        selectedMonth && selectedYear\n          ? isValidMonthYear(selectedMonth, selectedYear)\n            ? selectedMonth\n            : undefined\n          : selectedMonth\n    });\n    const [year, setYear] = useState({\n      errorText: undefined,\n      selected:\n        selectedMonth && selectedYear\n          ? isValidMonthYear(selectedMonth, selectedYear)\n            ? selectedYear\n            : undefined\n          : selectedYear\n    });\n\n    useEffect(() => {\n      if (formSubmitCounter) {\n        if (!month.selected && !year.selected) {\n          setMonth({\n            isError: ''\n          });\n          setYear({\n            isError: ''\n          });\n          setEmptyFields(errorForEmptyFields);\n        } else if (!month.selected && year.selected) {\n          setMonth({\n            errorText: errorForInvalidMonth\n          });\n        } else if (month.selected && !year.selected) {\n          setYear({\n            errorText: errorForInvalidYear\n          });\n        }\n      }\n    }, [errorForEmptyFields, errorForInvalidMonth, errorForInvalidYear, formSubmitCounter, month.selected, year.selected]);\n\n    /**\n     * @param {ReactSyntheticEvent} e\n     */\n    const changeMonth = e => {\n      setEmptyFields(undefined);\n      setMonth({\n        errorText: undefined,\n        selected: e.target.value\n      });\n\n      typeof onChangeMonthHandler === 'function' && onChangeMonthHandler(e);\n    };\n\n    /**\n     * @param {ReactSyntheticEvent} e\n     */\n    const changeYear = e => {\n      setYear({\n        errorText: undefined,\n        selected: e.target.value\n      });\n\n      if (emptyFields && !month.selected) {\n        setEmptyFields(undefined);\n        setMonth({\n          errorText: errorForInvalidMonth\n        });\n      }\n\n      setEmptyFields(undefined);\n\n      typeof onChangeYearHandler === 'function' && onChangeYearHandler(e);\n    };\n\n    /**\n     * @param {ReactSyntheticEvent} e\n     */\n    const blurMonthField = e => {\n      if (validateOnBlur) {\n        if (!e.target.value && !emptyFields) {\n          setMonth({\n            errorText: errorForInvalidMonth\n          });\n        }\n      }\n\n      typeof onBlurMonthHandler === 'function' && onBlurMonthHandler(e);\n    };\n\n    /**\n     * @param {ReactSyntheticEvent} e\n     */\n    const blurYearField = e => {\n      if (validateOnBlur) {\n        if (!e.target.value && month.selected) {\n          setYear({\n            errorText: errorForInvalidYear\n          });\n        } else if (!e.target.value && !month.selected) {\n          setMonth({\n            errorText: undefined\n          });\n          setEmptyFields(errorForEmptyFields);\n        }\n      }\n\n      typeof onBlurYearHandler === 'function' && onBlurYearHandler(e);\n    };\n\n    const invalidGroup = typeof emptyFields === 'string' ? Boolean(emptyFields) : undefined;\n\n    return (\n      <SelectGroup\n        className={classnames(CSS_PREFIX, className)}\n        css={css}\n        errorText={emptyFields}\n        id={id}\n        invalid={invalidGroup}\n        legend={labelForFieldset}\n        showErrorText={Boolean(emptyFields)}\n      >\n        <ExpirationMonth\n          blurMonthField={blurMonthField}\n          errorText={month.errorText}\n          id={`month-${id}`}\n          invalid={invalidGroup || (typeof month.errorText === 'string' ? Boolean(month.errorText) : undefined)}\n          labelForSelectMonth={labelForSelectMonth}\n          placeholderForMonth={placeholderForMonth}\n          selectMonth={changeMonth}\n          selectedMonth={month.selected}\n          selectedYear={year.selected}\n        />\n        <SelectGroupDelimiter>{delimiter}</SelectGroupDelimiter>\n        <ExpirationYear\n          blurYearField={blurYearField}\n          errorText={year.errorText}\n          id={`year-${id}`}\n          invalid={invalidGroup || (typeof year.errorText === 'string' ? Boolean(year.errorText) : undefined)}\n          labelForSelectYear={labelForSelectYear}\n          placeholderForYear={placeholderForYear}\n          selectYear={changeYear}\n          selectedMonth={month.selected}\n          selectedYear={year.selected}\n        />\n      </SelectGroup>\n    );\n  }\n);\n\nCardExpiration.propTypes = {\n  /**\n   * @ignore\n   */\n  className: string,\n  /**\n   * @ignore\n   */\n  css: func,\n  /**\n   *   Delimiter used in between month and year select.\n   */\n  delimiter: node,\n  /**\n   *   Error text used for empty fields.\n   */\n  errorForEmptyFields: string,\n  /**\n   *   Error text used for an invalid month.\n   */\n  errorForInvalidMonth: string,\n  /**\n   *   Error text used for an invalid year.\n   */\n  errorForInvalidYear: string,\n  /**\n   *   Number of times a form was submitted.\n   */\n  formSubmitCounter: number,\n  /**\n   *   Select group Id.\n   */\n  id: string,\n  /**\n   *   Label for select group.\n   */\n  labelForFieldset: string,\n  /**\n   *   Label for month select.\n   */\n  labelForSelectMonth: string,\n  /**\n   *   Label for year select.\n   */\n  labelForSelectYear: string,\n  /**\n   *   Callback to fire when you remove focus from a month select.\n   */\n  onBlurMonthHandler: func,\n  /**\n   *   Callback to fire when you remove focus from a year select.\n   */\n  onBlurYearHandler: func,\n  /**\n   *   Callback to fire when month value changes.\n   */\n  onChangeMonthHandler: func,\n  /**\n   *   Callback to fire when year value changes.\n   */\n  onChangeYearHandler: func,\n  /**\n   *   Placeholder label for month select.\n   */\n  placeholderForMonth: string,\n  /**\n   *   Placeholder label for year select.\n   */\n  placeholderForYear: string,\n  /**\n   *   Selected month when component first renders.\n   */\n  selectedMonth: string,\n  /**\n   *   Selected year when component first renders.\n   */\n  selectedYear: string,\n  /**\n   *   If true, will validate drop-downs on blur.\n   */\n  validateOnBlur: bool\n};\n\nCardExpiration.defaultProps = {\n  delimiter: ' / ',\n  errorForEmptyFields: 'Error for empty fields',\n  errorForInvalidMonth: 'Error for invalid month',\n  errorForInvalidYear: 'Error for invalid year',\n  formSubmitCounter: 0,\n  labelForFieldset: 'Label for fieldset',\n  labelForSelectMonth: 'Label for Month',\n  labelForSelectYear: 'Label for Year',\n  placeholderForMonth: 'Placeholder text',\n  placeholderForYear: 'Placeholder text',\n  validateOnBlur: false\n};\n\nCardExpiration.displayName = 'CardExpiration';\n\nexport default CardExpiration;\n","/* eslint-disable no-console */\n\nimport React from 'react';\nimport ButtonText from '../../button-text';\nimport CardExpiration from '../../card-expiration';\nimport Col from '../../col';\nimport Grid from '../../grid';\nimport List from '../../list';\nimport Row from '../../row';\nimport Typography from '../../typography';\n\nconst Formik = require('formik').Formik;\n\nconst CardExpirationExample = () => (\n  <Grid>\n    <Row>\n      <Col>\n        <Typography tag=\"h2\">Card Expiration - With default labels</Typography>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <CardExpiration id=\"default-test\" />\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <Typography tag=\"h2\">Card Expiration</Typography>\n        <List>\n          <li>With labels (locale: en-US) from prop</li>\n          <li>validateOnBlur</li>\n          <li>Integrated with Formik (3rd Party Form)</li>\n        </List>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <Formik\n          validate={values => {\n            const errors = {};\n            if (!values.month || !values.year) {\n              errors.expiration = true;\n            }\n            // focus for invalid fields need to be managed by product teams.\n            // below is a contrived example\n            if (!values.year) {\n              document.querySelector('#year-card-expiration-demo-1').focus();\n            }\n            if (!values.month) {\n              document.querySelector('#month-card-expiration-demo-1').focus();\n            }\n            return errors;\n          }}\n          onSubmit={(values, { setSubmitting }) => {\n            setTimeout(() => {\n              alert(JSON.stringify(values, null, 2)); // eslint-disable-line\n              setSubmitting(false);\n            }, 400);\n          }}\n        >\n          {({\n            errors,\n            handleSubmit,\n            isSubmitting,\n            submitCount,\n            values\n          }) => (\n            <form autoComplete=\"off\" onSubmit={handleSubmit}>\n              <CardExpiration\n                errorForEmptyFields=\"Please fill out the Expires field.\"\n                errorForInvalidMonth=\"Please fill out the Expires Month.\"\n                errorForInvalidYear=\"Please fill out the Expires Year.\"\n                formSubmitCounter={errors.expiration ? submitCount : undefined}\n                id=\"card-expiration-demo-1\"\n                labelForFieldset=\"Expires (MM / YY)\"\n                labelForSelectMonth=\"expires month\"\n                labelForSelectYear=\"expires year\"\n                onBlurMonthHandler={() => console.log('application:::on blur month handler')}\n                onBlurYearHandler={() => console.log('application:::on blur year handler')}\n                onChangeMonthHandler={e => {\n                  console.log('application:::on change month handler');\n                  values.month = e.target.value;\n                }}\n                onChangeYearHandler={e => {\n                  console.log('application:::on change year handler');\n                  values.year = e.target.value;\n                }}\n                placeholderForMonth=\"MM\"\n                placeholderForYear=\"YY\"\n              />\n              <ButtonText type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </ButtonText>\n            </form>\n          )}\n        </Formik>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <Typography tag=\"h2\">Card Expiration</Typography>\n        <List>\n          <li>With labels (locale: fr-FR) from prop</li>\n          <li>Integrated with Formik (3rd Party Form)</li>\n        </List>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <Formik\n          validate={values => {\n            const errors = {};\n            if (!values.month || !values.year) {\n              errors.expiration = true;\n            }\n\n            // focus for invalid fields need to be managed by product teams.\n            // below is a contrived example\n            if (!values.year) {\n              document.querySelector('#year-card-expiration-demo-2').focus();\n            }\n            if (!values.month) {\n              document.querySelector('#month-card-expiration-demo-2').focus();\n            }\n            return errors;\n          }}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit');\n            console.log(values);\n            setTimeout(() => {\n              alert(JSON.stringify(values, null, 2)); // eslint-disable-line\n              setSubmitting(false);\n            }, 400);\n          }}\n        >\n          {({\n            errors,\n            handleSubmit,\n            isSubmitting,\n            submitCount,\n            values\n          }) => (\n            <form autoComplete=\"off\" onSubmit={handleSubmit} lang=\"fr\">\n              <CardExpiration\n                errorForEmptyFields=\"S'il vous plaît remplir le champ Expires.\"  // eslint-disable-line\n                errorForInvalidMonth=\"S'il vous plaît remplir le mois expire.\" // eslint-disable-line\n                errorForInvalidYear=\"S'il vous plaît remplir l'année expire.\" // eslint-disable-line\n                formSubmitCounter={errors.expiration ? submitCount : undefined}\n                id=\"card-expiration-demo-2\"\n                labelForFieldset=\"Expire (MM / AA)\"\n                labelForSelectMonth=\"expire mois\" // eslint-disable-line\n                labelForSelectYear=\"expire année\" // eslint-disable-line\n                onBlurMonthHandler={() => console.log('application:::on blur month handler')}\n                onBlurYearHandler={() => console.log('application:::on blur year handler')}\n                onChangeMonthHandler={e => {\n                  console.log('application:::on change month handler');\n                  values.month = e.target.value;\n                }}\n                onChangeYearHandler={e => {\n                  console.log('application:::on change year handler');\n                  values.year = e.target.value;\n                }}\n                placeholderForMonth=\"MM\"\n                placeholderForYear=\"AA\"\n              />\n              <ButtonText type=\"submit\" disabled={isSubmitting}>\n                Soumettre\n              </ButtonText>\n            </form>\n          )}\n        </Formik>\n      </Col>\n    </Row>\n  </Grid>\n);\n\nexport default CardExpirationExample;\n","/* This file is autogenerated  DO NOT EDIT */\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport classnames from 'classnames';\nimport raw from \"raw.macro\";\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport theme from 'prism-react-renderer/themes/github';\nimport { NavLink } from 'react-router-dom';\n\nimport Col from '../../components/col';\nimport DataTable from '../../components/data-table';\nimport Icon from '../../components/icon';\nimport Grid from '../../components/grid';\nimport Row from '../../components/row';\nimport ScreenReader from '../../components/screen-reader';\nimport Tab from '../../components/tab';\nimport TabList from '../../components/tab-list';\nimport Tbody from '../../components/tbody';\nimport Td from '../../components/td';\nimport Th from '../../components/th';\nimport Thead from '../../components/thead';\nimport Tr from '../../components/tr';\nimport Typography from '../../components/typography';\n\nimport Example from '../../components/card-expiration/example';\n\nconst prettier = require(\"prettier/standalone\");\nconst plugins = [require(\"prettier/parser-html\")];\nconst reactDocs = require('react-docgen');\nconst js = raw('../../components/card-expiration/index.js');\nconst jsParsed = js.replace('= memo(({', '= React.forwardRef(({').replace('cloneElement(', 'React.cloneElement('); // see https://github.com/reactjs/react-docgen/issues/342\nconst exampleCodeRaw = raw('../../components/card-expiration/example/index.js');\nconst exampleCode = exampleCodeRaw.replace(/'..\\/..\\//g, `'@visa/vds-react/`);\n\nconst CardExpirationExample = ({ ...remainingProps }) => {\n  const [componentProps, setComponentProps] = useState({});\n\n  useEffect(() => {\n    try {\n      setComponentProps(reactDocs.parse(jsParsed));\n    } catch {\n      // eslint-disable-next-line\n      console.log(`\n        React-docgen could not parse props for CardExpiration\n        check for fix here https://github.com/reactjs/react-docgen/issues/342`);\n    }\n  }, []);\n\n  return (\n    <Grid siblingOfStickyFooter>\n      <Row>\n        <Col>\n          <Typography tag=\"h1\">Card Expiration</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col role=\"navigation\" aria-label=\"Secondary\">\n          <TabList role=\"none\">\n            <Tab role={undefined} tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/card-expiration`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"log\" resolution=\"low\" />Card Expiration Example\n            </Tab>\n            <Tab role={undefined} tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/card-expiration/code`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />JSX of Example\n            </Tab>\n            <Tab role={undefined} tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/card-expiration/html`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />HTML of Example\n            </Tab>\n          </TabList>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/card-expiration`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/card-expiration`\n            })}\n          >\n            <Example {...remainingProps} />\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/card-expiration/code`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/card-expiration/code`\n            })}\n          >\n            <Highlight {...defaultProps} theme={theme} code={exampleCode} language=\"jsx\">\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })} key={i}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} key={key} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/card-expiration/html`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/card-expiration/html`\n            })}\n          >\n            <Highlight\n              {...defaultProps}\n              theme={theme}\n              code={prettier.format(ReactDOMServer.renderToStaticMarkup(<Example {...remainingProps} />), { css: 'ignore', parser: 'html', plugins, printWidth: 120 })}\n              language=\"html\"\n            >\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })} key={i}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} key={key} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <DataTable\n            className={classnames([\n              'components'\n            ])}\n            dividerLines\n            size=\"compact\"\n          >\n            <ScreenReader tag=\"caption\">Props</ScreenReader>\n            <Thead>\n              <Tr className=\"vds-tr\">\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Prop\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Type\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Default\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Description\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {\n                componentProps.props && Object.entries(componentProps.props)\n                  .filter(doc => doc[1].description !== '@ignore')\n                  .map((doc, i) => (\n                    <Tr className=\"vds-tr\" key={i}>\n                      <Th className=\"vds-td\" scope=\"row\">\n                        {doc[0]} {doc[1].required ? <strong> - required</strong> : ''}\n                      </Th>\n                      <Td className=\"vds-td\">\n                        <strong>{doc[1].type.name}</strong>\n                        {\n                          doc[1].type.value && doc[1].type.value.length\n                            ? <small style={{ color: '#1a1f71' }}><br />\n                              {\n                                Array.isArray(doc[1].type.value)\n                                  ? doc[1].type.value.map(v => v.value || v.name).join(', ')\n                                  : typeof doc[1].type.value === 'string'\n                                    ? doc[1].type.value\n                                    : undefined\n                              }\n                            </small>\n                            : ''\n                        }\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].defaultValue ? doc[1].defaultValue.value : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].description}\n                      </Td>\n                    </Tr>\n                  ))\n              }\n            </Tbody>\n          </DataTable>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nCardExpirationExample.displayName = 'CardExpirationExample';\n\nexport default CardExpirationExample;\n"],"sourceRoot":""}
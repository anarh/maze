{"version":3,"sources":["components/input-card-indicator/index.js","components/input-card/index.js","components/input-card/example/index.js","pages/components/input-card.js","components/data-table/index.js","components/sr/index.js","components/tbody/index.js","components/td/index.js","components/th/index.js","components/thead/index.js","components/tr/index.js","components/input-container/index.js","components/input-label/index.js","components/input-bar/index.js","components/input-message/index.js","components/input-option/index.js","components/input-hint/index.js","components/input-text/index.js","components/input/index.js","components/input-input/index.js","../node_modules/@visa/ui-utils/lib/js/text-mask/react/useTextMask.js","../node_modules/@visa/ui-utils/lib/js/text-mask/react/index.js"],"names":["InputCardIndicator","children","className","type","remainingProps","classnames","Boolean","displayName","AMEX","constants","AMEX_MASK","LENGTH_AMEX","LENGTH_DEFAULT","NON_AMEX_MASK","acceptedBrandsCheck","utilities","binCheck","brands","checkMod","filterAcceptedBrands","possibleBrand","InputCard","forwardRef","ref","acceptedCards","cardBins","checkMods","css","errorText","handleCardNumberChange","id","shortid","generate","inputMode","isValidCard","label","name","placeholder","shouldValidateAcceptedCards","validateMod11","useState","value","defaultValue","setValue","cardBrand","setCardBrand","isValidBin","isSupportedCard","partnerAcceptedCards","setIsValidCardNum","maxLength","setMaxLength","uid","useRef","current","__isPartnerAccepted","mask","onChange","e","isNaN","target","replace","enteredValue","enteredCardNumber","possibleEnteredBrand","isEnteredBinValid","shouldCheckAcceptedBrands","isEnteredCardSupported","passesMod","length","brand","isSupported","isValid","handleValueChange","textMaskProps","useTextMask","getInputProps","onBlur","onFocus","onKeyUp","includes","toLowerCase","undefined","defaultProps","autoComplete","validator","InputCardExample","cardNumber","setCardNumber","error","setError","isSupportedBrand","setIsSupportedBrand","isValidCardNumber","setIsValidCardNumber","getInlineError","tag","noValidate","errorType","checkMod11","errorMessage","helpText","invalid","required","showErrorText","showHelpText","reactDocs","require","jsParsed","exampleCode","componentProps","setComponentProps","useEffect","parse","console","log","siblingOfStickyFooter","exact","to","process","activeClassName","resolution","match","path","theme","code","language","style","tokens","getLineProps","getTokenProps","map","line","i","key","display","opacity","userSelect","width","token","dividerLines","size","aria-sort","role","scope","props","Object","entries","filter","doc","description","tabIndex","color","v","join","DataTable","customizableColumns","keyValuePairs","reveal","revealFirstColumn","revealLastColumn","rowSelection","stickyHeader","propTypes","node","string","columns","arrayOf","shape","bool","data","oneOf","Sr","Tag","elementType","Tbody","Td","textAlign","Th","Thead","Tr","InputContainer","disabled","expanded","filled","focus","isTextarea","readOnly","InputLabel","InputBar","InputMessage","ariaAtomic","show","aria-atomic","aria-live","InputOption","InputHint","InputText","Input","ariaLabel","checkmarkIcon","containerProps","errorIcon","helpIcon","labelId","showCheckmark","useNativePlaceholder","dirty","setDirty","setFilled","focused","setFocused","isInvalid","setIsInvalid","setValidity","checkValidity","trim","htmlFor","aria-describedby","aria-label","aria-invalid","helpOrErrorText","getHelpOrErrorText","InputInput","arguments","_props$guide","guide","_props$placeholderCha","placeholderChar","_props$upperCaseValue","upperCaseValue","inputRef","textMask","_useState","adjustedCaretPosition","conformedValue","toString","_useState2","state","setState","createTextMask","inputElement","_textMask$current$upd","update","previousPlaceholder","_textMask$current$upd2","Error","_textMask$current$upd3","_textMask$current$upd4","newState","meta"],"mappings":"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","file":"static/js/30.e3ce66e0.chunk.js","sourcesContent":["import React from 'react';\nimport { node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-card-indicator';\n\nconst InputCardIndicator = ({\n  children,\n  className,\n  type,\n  ...remainingProps\n}) => (\n  <div\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_PREFIX}--${type}`]: Boolean(type)\n    }, className)}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nInputCardIndicator.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n  * Type\n  */\n  type: oneOf([\n    'amex',\n    'discover',\n    'elo',\n    'mastercard',\n    'visa'\n  ])\n};\n\nInputCardIndicator.displayName = 'InputCardIndicator';\n\nexport default InputCardIndicator;\n","import React, { forwardRef, useRef, useState } from 'react';\nimport { arrayOf, bool, func, number, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\nimport shortid from 'shortid';\nimport { constants, utilities } from '@visa/ui-utils/lib/js/card-number';\nimport { useTextMask } from '@visa/ui-utils/lib/js/text-mask/react';\nimport Input from '../input';\nimport InputOption from '../input-option';\nimport InputCardIndicator from '../input-card-indicator';\n\nconst CSS_PREFIX = 'vds-input-card';\n\nconst {\n  AMEX,\n  AMEX_MASK,\n  LENGTH_AMEX,\n  LENGTH_DEFAULT,\n  NON_AMEX_MASK\n} = constants;\n\nconst {\n  acceptedBrandsCheck,\n  binCheck,\n  brands,\n  checkMod,\n  filterAcceptedBrands,\n  possibleBrand\n} = utilities;\n\n/**\n * @return {JSX}\n */\nconst InputCard = forwardRef(({\n  acceptedCards = brands,\n  cardBins,\n  checkMods,\n  className,\n  css,\n  errorText,\n  handleCardNumberChange,\n  id = shortid.generate(),\n  inputMode,\n  isValidCard,\n  label,\n  name,\n  placeholder,\n  shouldValidateAcceptedCards,\n  type,\n  validateMod11,\n  ...remainingProps\n}, ref) => { // eslint-disable-line no-unused-vars\n  const [value, setValue] = useState(\n    remainingProps.value\n      ? remainingProps.value\n      : remainingProps.defaultValue\n        ? remainingProps.defaultValue\n        : ''\n  );\n  const [cardBrand, setCardBrand] = useState(value ? possibleBrand(value, cardBins) : '');\n  const isValidBin = value ? binCheck(value, cardBins) : isValidCard;\n\n  const isSupportedCard =\n    shouldValidateAcceptedCards && acceptedCards ? acceptedBrandsCheck(cardBrand, acceptedCards) : true;\n  const partnerAcceptedCards =\n    shouldValidateAcceptedCards && acceptedCards ? filterAcceptedBrands(acceptedCards) : acceptedCards;\n\n  // eslint-disable-next-line no-unused-vars\n  const [isValidCardNum, setIsValidCardNum] = useState(\n    shouldValidateAcceptedCards ? isValidBin && isSupportedCard : isValidBin\n  );\n  const [maxLength, setMaxLength] = useState(cardBrand === AMEX ? LENGTH_AMEX : LENGTH_DEFAULT);\n  const uniqueId = useRef(id);\n  const uid = uniqueId.current;\n  const __isPartnerAccepted = isSupportedCard;\n\n  /**\n   * @description check entered value for validity then pass that info to caller for its validation and own purposes\n   * Since caller owns and determines validation it will need to inform CardNumber if entered value is valid\n   * along with the desired error message.\n   *\n   * @param {SyntheticEvent} e\n   */\n  const handleValueChange = e => {\n    // e.persist();\n    const cardInput = e.target;\n    const enteredValue = cardInput.value;\n    const enteredCardNumber = enteredValue.replace(/\\s/g, '');\n    const possibleEnteredBrand = possibleBrand(enteredCardNumber, cardBins);\n    const isEnteredBinValid = binCheck(enteredCardNumber, cardBins);\n    const shouldCheckAcceptedBrands = shouldValidateAcceptedCards && partnerAcceptedCards;\n    const isEnteredCardSupported = shouldCheckAcceptedBrands\n      ? acceptedBrandsCheck(possibleEnteredBrand, partnerAcceptedCards)\n      : __isPartnerAccepted;\n\n    setCardBrand(possibleEnteredBrand);\n    setIsValidCardNum(shouldCheckAcceptedBrands ? isEnteredBinValid && isEnteredCardSupported : isEnteredBinValid);\n    setValue(enteredValue);\n\n    const shouldCheckMod = enteredValue.length === maxLength && checkMods;\n    const passesMod = shouldCheckMod ? checkMod(enteredCardNumber, validateMod11) : true;\n\n    setMaxLength(possibleEnteredBrand === AMEX ? LENGTH_AMEX : LENGTH_DEFAULT);\n\n    handleCardNumberChange &&\n      handleCardNumberChange(e, {\n        brand: possibleEnteredBrand,\n        isSupported: isEnteredCardSupported,\n        isValid: shouldCheckAcceptedBrands ? isEnteredBinValid && isEnteredCardSupported : isEnteredBinValid,\n        passesMod,\n        value: e.target.value\n      });\n  };\n\n  /**\n   * @description handle change event but only for numbers-only values so field error state is correct\n   * @param {SyntheticEvent} e\n   */\n  const handleOnChange = e => {\n    if (!isNaN(e.target.value.replace(/\\s/g, ''))) {\n      handleValueChange(e);\n    }\n  };\n\n  remainingProps.mask = cardBrand === AMEX ? AMEX_MASK : NON_AMEX_MASK;\n  remainingProps.onChange = handleOnChange;\n\n  const textMaskProps = useTextMask(remainingProps).getInputProps;\n\n  return (\n    <div\n      className={classnames(CSS_PREFIX, className)}\n      css={css}\n    >\n      <Input\n        {...remainingProps}\n        {...textMaskProps}\n        errorText={errorText}\n        id={uid}\n        inputMode={inputMode}\n        label={label}\n        maxLength={maxLength}\n        name={name}\n        onBlur={remainingProps.onBlur}\n        onFocus={remainingProps.onFocus}\n        onKeyUp={remainingProps.onKeyUp}\n        placeholder={placeholder}\n        // ref={ref}\n        type={type}\n        value={value}\n      >\n        <InputOption>\n          <InputCardIndicator\n            type={brands.includes(cardBrand) ? cardBrand.toLowerCase() : undefined}\n          />\n        </InputOption>\n      </Input>\n    </div>\n  );\n});\n\nInputCard.propTypes = {\n  /**\n   * @type {!array}\n   * Accepted cards\n   */\n  acceptedCards: arrayOf(string),\n\n  /**\n   * @type {!string}\n   * Auto complete\n   */\n  autoComplete: string,\n\n  /**\n   * @type {!array}\n   * Card Bins\n   */\n  cardBins: arrayOf(number).isRequired,\n\n  /**\n   * @type {!bool}\n   * Check Mods\n   */\n  checkMods: bool,\n\n  /**\n   * @type {!string}\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * @type {!string}\n   * @ignore\n   */\n  css: func,\n\n  /**\n   * @type {!string}\n   * Error\n   */\n  errorText: string,\n\n  /**\n   * @type {?function(Event)}\n   * Handle card number change\n   */\n  handleCardNumberChange: func,\n\n  /**\n   * While overriding this value is likely to not cause issues it is recommended to override with caution.\n   * See jsdoc for `name` for more information.\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   * Input Mode to force mobile screens to use large number pad\n   */\n  inputMode: string,\n\n  /**\n   * @type {bool}\n   * is valid card\n   */\n  isValidCard: bool,\n\n  /**\n   * Label\n   */\n  label: string,\n\n  /**\n   * @type {!string}\n   *\n   * Note: It is not recommended to override this name. It must follow a specific convention\n   to support card scanning and autocomplete.\n   * See: https://developers.google.com/web/fundamentals/design-and-ux/input/forms/#recommended_input_name_and_autocomplete_attribute_values\n  for more information.\n   * This name has been chosen based on experiences with real-world usage of applications.\n   *\n   * Variations of this value have not been tested and may not be supported, so override with caution.\n   *\n   * Overriding this value should be done only if there are multiple cardNumber fields present in the same form\n   or on the same screen at the same time.\n   */\n  name: string,\n\n  /**\n   * @type {?function(Event)}\n   * On Blur\n   */\n  onBlur: func,\n\n  /**\n   * @type {?function(Event)}\n   * On Focus\n   */\n  onFocus: func,\n\n  /**\n   * @type {?function(Event)}\n   * On Keyup\n   */\n  onKeyUp: func,\n\n  /**\n   * Placeholder\n   */\n  placeholder: string,\n\n  /**\n   * @type {!bool}\n   * Should validate accepted cards\n   */\n  shouldValidateAcceptedCards: bool,\n\n  /**\n   * Type\n   */\n  type: string,\n\n  /**\n   * @type {bool}\n   * Validate mod 11\n   */\n  validateMod11: bool\n};\n\nInputCard.defaultProps = {\n  autoComplete: 'cc-number',\n  inputMode: 'decimal',\n  isValidCard: true,\n  name: 'cardNumber',\n  type: 'text'\n};\n\nInputCard.displayName = 'InputCard';\n\nexport default InputCard;\n","import React, { useState } from 'react';\nimport { utilities } from '@visa/ui-utils/lib/js/card-number';\nimport Col from '../../col';\nimport Grid from '../../grid';\nimport InputCard from '../../input-card';\nimport Row from '../../row';\nimport Typography from '../../typography';\n\nconst { validator } = utilities;\n\nconst InputCardExample = () => {\n  const [cardBrand, setCardBrand] = useState(null);\n  const [cardNumber, setCardNumber] = useState('');\n  const [error, setError] = useState('');\n  const [isSupportedBrand, setIsSupportedBrand] = useState(true);\n  const [isValidCardNumber, setIsValidCardNumber] = useState(true);\n  const acceptedCards = ['AMEX', 'DISCOVER', 'ELO', 'MASTERCARD', 'VISA'];\n  const cardBins = [\n    400444,\n    412356,\n    506717,\n    512346,\n    650590,\n    612345\n  ];\n  const checkMod11 = false;\n  const checkMods = true;\n\n  const getInlineError = (type, brand) => {\n    const inlineErrors = {\n      'EMPTY': 'You need to enter a value',\n      'INVALID_BIN': 'That is not a real card brand',\n      'INVALID_BIN_BRAND': `You sure that is a real ${brand} card?`,\n      'INVALID_GENERIC': 'Something is not correct',\n      'NOT_SUPPORTED': 'Apologies but we do not accept that card brand',\n      'PARTIAL': 'Incomplete card number!'\n    };\n\n    return inlineErrors[type];\n  };\n\n  const handleBlur = () => {\n    const isBlur = true;\n    const conditions = {\n      brand: cardBrand,\n      checkMod11,\n      checkMods,\n      isSupported: isSupportedBrand,\n      isValid: isValidCardNumber,\n      value: cardNumber\n    };\n\n    const errorType = validator(isBlur, conditions);\n    const errorMessage = getInlineError(errorType, cardBrand);\n\n    setIsValidCardNumber(Boolean(errorMessage) !== true);\n    setError(errorMessage);\n  };\n\n  const handleChange = (e, { brand, isSupported, isValid, value }) => {\n    const isBlur = false;\n    const conditions = {\n      brand: cardBrand,\n      checkMod11,\n      checkMods,\n      isSupported,\n      isValid,\n      value\n    };\n\n    const errorType = validator(isBlur, conditions);\n    const errorMessage = getInlineError(errorType, brand);\n\n    setCardBrand(brand);\n    setCardNumber(value);\n    setIsSupportedBrand(isSupported);\n    setIsValidCardNumber(isValid);\n    setError(errorMessage);\n  };\n\n  return (\n    <Grid>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Input Card</Typography>\n          <Typography>All Card Brands Accepted with Full Validation</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <form noValidate>\n            <InputCard\n              acceptedCards={acceptedCards}\n              cardBins={cardBins}\n              checkMods\n              errorText={error}\n              handleCardNumberChange={handleChange}\n              helpText=\"Enter your card number here\"\n              invalid={!isValidCardNumber}\n              label=\"Card Number\"\n              onBlur={handleBlur}\n              placeholder=\"15 to 16 digits\"\n              required\n              shouldValidateAcceptedCards\n              showErrorText\n              showHelpText\n              type=\"tel\"\n              validateMod11\n            />\n          </form>\n        </Col>\n      </Row>\n\n    </Grid>\n  );\n};\n\nexport default InputCardExample;\n","/* This file is autogenerated  DO NOT EDIT */\n\nimport React, { useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport raw from \"raw.macro\";\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport theme from 'prism-react-renderer/themes/github';\nimport { NavLink } from 'react-router-dom';\n\nimport Col from '../../components/col';\nimport DataTable from '../../components/data-table';\nimport Icon from '../../components/icon';\nimport Grid from '../../components/grid';\nimport Row from '../../components/row';\nimport Sr from '../../components/sr';\nimport Tab from '../../components/tab';\nimport TabList from '../../components/tab-list';\nimport Tbody from '../../components/tbody';\nimport Td from '../../components/td';\nimport Th from '../../components/th';\nimport Thead from '../../components/thead';\nimport Tr from '../../components/tr';\nimport Typography from '../../components/typography';\n\nimport Example from '../../components/input-card/example';\n\nconst reactDocs = require('react-docgen');\nconst js = raw('../../components/input-card/index.js');\nconst jsParsed = js.replace('= memo(({', '= React.forwardRef(({').replace('cloneElement(', 'React.cloneElement('); // see https://github.com/reactjs/react-docgen/issues/342\nconst exampleCodeRaw = raw('../../components/input-card/example/index.js');\nconst exampleCode = exampleCodeRaw.replace(/'..\\/..\\//g, `'@visa/vds-react/`);\n\nconst InputCardExample = ({ ...remainingProps }) => {\n  const [componentProps, setComponentProps] = useState({});\n\n  useEffect(() => {\n    try {\n      setComponentProps(reactDocs.parse(jsParsed));\n    } catch {\n      // eslint-disable-next-line\n      console.log(`\n        React-docgen could not parse props for InputCard\n        check for fix here https://github.com/reactjs/react-docgen/issues/342`);\n    }\n  }, []);\n\n  return (\n    <Grid siblingOfStickyFooter>\n      <Row>\n        <Col>\n          <Typography tag=\"h1\">Input Card</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <TabList>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/input-card`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"log\" resolution=\"low\" />Input Card Example\n            </Tab>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/input-card/code`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />Code for Input Card Example\n            </Tab>\n          </TabList>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/input-card/code`,\n              'vds-state--show': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/input-card/code`\n            })}\n          >\n            <Example {...remainingProps} />\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/input-card/code`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/input-card/code`\n            })}\n          >\n            <Highlight {...defaultProps} theme={theme} code={exampleCode} language=\"jsx\">\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <DataTable\n            className={classnames([\n              'components'\n            ])}\n            dividerLines\n            size=\"compact\"\n          >\n            <Sr tag=\"caption\">Props</Sr>\n            <Thead>\n              <Tr className=\"vds-tr\">\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Prop\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Type\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Default\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Description\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {\n                componentProps.props && Object.entries(componentProps.props)\n                  .filter(doc => doc[1].description !== '@ignore')\n                  .map((doc, i) => (\n                    <Tr className=\"vds-tr\" key={i} tabIndex=\"0\">\n                      <Td className=\"vds-td\">\n                        {doc[0]} {doc[1].required ? <sup style={{ color: 'red' }}> required</sup> : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        <strong>{doc[1].type.name}</strong>\n                        {\n                          doc[1].type.value && doc[1].type.value.length\n                            ? <small style={{ color: '#1a1f71' }}><br />\n                              {doc[1].type.value.length ? doc[1].type.value.map(v => v.value || v.name).join(', ') : undefined}\n                            </small>\n                            : ''\n                        }\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].defaultValue ? doc[1].defaultValue.value : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].description}\n                      </Td>\n                    </Tr>\n                  ))\n              }\n            </Tbody>\n          </DataTable>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nInputCardExample.displayName = 'InputCardExample';\n\nexport default InputCardExample;\n","import React, { forwardRef } from 'react';\nimport { arrayOf, bool, node, oneOf, shape, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-data-table';\nconst CSS_STATE = 'vds-state';\n\nconst DataTable = forwardRef(({\n  children,\n  className,\n  customizableColumns,\n  dividerLines,\n  keyValuePairs,\n  reveal,\n  revealFirstColumn,\n  revealLastColumn,\n  rowSelection,\n  size,\n  stickyHeader,\n  ...remainingProps\n}, ref) => (\n  <table\n    {...remainingProps}\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_STATE}--customizable-columns`]: Boolean(customizableColumns),\n      [`${CSS_STATE}--divider-lines`]: Boolean(dividerLines),\n      [`${CSS_STATE}--key-value-pairs`]: Boolean(keyValuePairs),\n      [`${CSS_STATE}--${size}`]: Boolean(size),\n      [`${CSS_STATE}--reveal`]: Boolean(reveal),\n      [`${CSS_STATE}--reveal-first-column`]: Boolean(revealFirstColumn),\n      [`${CSS_STATE}--reveal-last-column`]: Boolean(revealLastColumn),\n      [`${CSS_STATE}--${rowSelection}`]: Boolean(rowSelection),\n      [`${CSS_STATE}--sticky-header`]: Boolean(stickyHeader)\n    }, className)}\n    ref={ref}\n  >\n    {children}\n  </table>\n));\n\nDataTable.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Columns\n   */\n  columns: arrayOf(shape({})),\n\n  /**\n   * Customizable columns\n   */\n  customizableColumns: bool,\n\n  /**\n   * Data\n   */\n  data: arrayOf(shape({})),\n\n  /**\n   * Divider lines\n   */\n  dividerLines: bool,\n\n  /**\n   * Key value pairs\n   */\n  keyValuePairs: bool,\n\n  /**\n   * Reveal\n   */\n  reveal: bool,\n\n  /**\n   * Reveal first column\n   */\n  revealFirstColumn: bool,\n\n  /**\n   * Reveal last column\n   */\n  revealLastColumn: bool,\n\n  /**\n   * Row Selection\n   */\n  rowSelection: oneOf(['multi-select', 'single-select']),\n\n  /**\n   * Size\n   */\n  size: oneOf(['compact']),\n\n  /**\n   * Sticky Header\n   */\n  stickyHeader: bool\n};\n\nDataTable.displayName = 'DataTable';\n\nexport default DataTable;\n","import React, { forwardRef } from 'react';\nimport { elementType, node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-sr';\n\nconst Sr = forwardRef(({ children, className, tag: Tag, ...remainingProps }, ref) => (\n  <Tag\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </Tag>\n));\n\nSr.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n  * Tag\n  */\n  tag: elementType\n};\n\nSr.defaultProps = {\n  tag: 'span'\n};\n\nSr.displayName = 'Sr';\n\nexport default Sr;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tbody';\n\nconst Tbody = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tbody\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tbody>\n));\n\nTbody.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTbody.displayName = 'Tbody';\n\nexport default Tbody;\n","import React, { forwardRef } from 'react';\nimport { node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-td';\n\nconst Td = forwardRef(({\n  children,\n  className,\n  textAlign,\n  ...remainingProps\n}, ref) => (\n  <td\n    className={classnames(CSS_PREFIX, {\n      [`vds-text--${textAlign}`]: Boolean(textAlign)\n    }, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </td>\n));\n\nTd.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Text alignment at all sizes\n   */\n  textAlign: oneOf(['center', 'left', 'right'])\n};\n\nTd.displayName = 'Td';\n\nexport default Td;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-th';\n\nconst Th = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <th\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </th>\n));\n\nTh.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTh.displayName = 'Th';\n\nexport default Th;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-thead';\n\nconst Thead = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <thead\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </thead>\n));\n\nThead.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nThead.displayName = 'Thead';\n\nexport default Thead;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tr';\n\nconst Tr = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tr\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tr>\n));\n\nTr.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTr.displayName = 'Tr';\n\nexport default Tr;\n","import React from 'react';\nimport { bool, func, node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input';\nconst CSS_STATE = 'vds-state';\n\nconst InputContainer = ({\n  children,\n  className,\n  css,\n  disabled,\n  expanded,\n  filled,\n  focus,\n  invalid,\n  isTextarea,\n  readOnly,\n  ...remainingProps\n}) => (\n  <div\n    className={classnames({\n      [`${CSS_PREFIX}`]: !isTextarea,\n      [`${CSS_PREFIX}-textarea-container`]: Boolean(isTextarea),\n      [`${CSS_STATE}--disabled`]: Boolean(disabled),\n      [`${CSS_STATE}--error`]: Boolean(invalid),\n      [`${CSS_STATE}--expanded`]: Boolean(expanded),\n      [`${CSS_STATE}--filled`]: Boolean(filled),\n      [`${CSS_STATE}--focus`]: Boolean(focus),\n      [`${CSS_STATE}--readonly`]: Boolean(readOnly),\n      [`${CSS_STATE}--success`]: typeof invalid === 'boolean' && !invalid\n    }, className)}\n    css={css}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nInputContainer.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * @ignore\n   */\n  css: func,\n\n  /**\n   * Disabled\n   */\n  disabled: bool,\n\n  /**\n   * Expanded\n   */\n  expanded: bool,\n\n  /**\n   * Filled\n   */\n  filled: bool,\n\n  /**\n   * Focus\n   */\n  focus: bool,\n\n  /**\n   * Invalid\n   */\n  invalid: bool,\n\n  /**\n   * isTextarea\n   */\n  isTextarea: bool,\n\n  /**\n   * ReadOnly\n   */\n  readOnly: bool\n};\n\nInputContainer.displayName = 'InputContainer';\n\nexport default InputContainer;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-label';\n\nconst InputLabel = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <label\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </label>\n));\n\nInputLabel.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputLabel.displayName = 'InputLabel';\n\nexport default InputLabel;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-bar';\n\nconst InputBar = ({ children, className, ...remainingProps }) => (\n  <div\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nInputBar.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputBar.displayName = 'InputBar';\n\nexport default InputBar;\n","import React from 'react';\nimport { bool, node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-message';\nconst CSS_STATE = 'vds-state';\n\nconst InputMessage = ({\n  ariaAtomic,\n  children,\n  className,\n  invalid,\n  role,\n  show,\n  ...remainingProps\n}) => (\n  <span\n    aria-atomic={ariaAtomic}\n    aria-live={invalid ? 'assertive' : 'polite'}\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_STATE}--hidden`]: !show,\n      [`${CSS_STATE}--error`]: Boolean(invalid)\n    }, className)}\n    role={role}\n    {...remainingProps}\n  >\n    {children}\n  </span>\n);\n\nInputMessage.propTypes = {\n  /**\n   * Aria Atomic\n   */\n  ariaAtomic: oneOf(['true', 'false']),\n\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Invalid\n   */\n  invalid: bool,\n\n  /**\n   * Role\n   */\n  role: string,\n\n  /**\n   * Show\n   */\n  show: bool\n};\n\nInputMessage.defaultProps = {\n  ariaAtomic: 'true',\n  role: 'alert'\n};\n\nInputMessage.displayName = 'InputMessage';\n\nexport default InputMessage;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-option';\n\nconst InputOption = ({ children, className, ...remainingProps }) => (\n  <span\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </span>\n);\n\nInputOption.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputOption.displayName = 'InputOption';\n\nexport default InputOption;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-hint';\n\nconst InputHint = ({ children, className, ...remainingProps }) => (\n  <span\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </span>\n);\n\nInputHint.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputHint.displayName = 'InputHint';\n\nexport default InputHint;\n","import React, { forwardRef } from 'react';\nimport { string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input--input-text';\n\nconst InputText = forwardRef(({ className, type, ...remainingProps }, ref) => (\n  <input\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    type={type}\n    {...remainingProps}\n  />\n));\n\nInputText.propTypes = {\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Type of the input element. It should be a valid HTML5 input type.\n   */\n  type: string\n};\n\nInputText.defaultProps = {\n  type: 'text'\n};\n\nInputText.displayName = 'InputText';\n\nexport default InputText;\n","import React, { forwardRef, Fragment, useEffect, useRef, useState } from 'react';\nimport { bool, func, node, number, object, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\nimport shortid from 'shortid';\nimport InputContainer from '../input-container';\nimport InputLabel from '../input-label';\nimport InputBar from '../input-bar';\nimport InputHint from '../input-hint';\nimport InputInput from '../input-input';\nimport InputText from '../input-text';\nimport InputMessage from '../input-message';\nimport InputOption from '../input-option';\nimport Icon from '../icon';\n\nconst CSS_STATE = 'vds-state';\n\nconst Input = forwardRef(({\n  ariaLabel,\n  checkmarkIcon,\n  children,\n  className,\n  containerProps,\n  css,\n  disabled,\n  errorIcon,\n  errorText,\n  expanded,\n  helpIcon,\n  helpText,\n  id = shortid.generate(),\n  invalid,\n  label,\n  labelId,\n  noValidate,\n  onBlur,\n  onChange,\n  onFocus,\n  placeholder,\n  readOnly,\n  showCheckmark,\n  showErrorText,\n  showHelpText,\n  useNativePlaceholder,\n  ...remainingProps\n}, ref) => {\n  const [dirty, setDirty] = useState(false);\n  const [filled, setFilled] = useState(Boolean(remainingProps.value) || Boolean(remainingProps.defaultValue));\n  const [focused, setFocused] = useState(false);\n  const [isInvalid, setIsInvalid] = useState(invalid);\n  const uniqueId = useRef(id);\n  const uid = uniqueId.current;\n\n  const setValidity = e => {\n    if (!noValidate) {\n      if (dirty) {\n        setIsInvalid((!e.target.checkValidity() || (e.target.required && !e.target.value.trim().length)));\n      }\n\n      if (!dirty && (e.target.required && !e.target.value.trim().length)) {\n        setIsInvalid(true);\n      }\n\n      if (dirty && !e.target.required && !e.target.value.trim().length) {\n        setIsInvalid(undefined);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setFilled(Boolean(remainingProps.defaultValue) || Boolean(remainingProps.value));\n  }, [remainingProps.defaultValue, remainingProps.value]);\n\n  useEffect(() => {\n    setIsInvalid(invalid);\n  }, [invalid]);\n\n  const handleBlur = e => {\n    setFocused(false);\n    setValidity(e);\n\n    if (typeof onBlur === 'function') {\n      onBlur(e);\n    }\n  };\n\n  const handleChange = e => {\n    setFilled(e.target.value !== '');\n\n    if (typeof isInvalid === 'boolean') {\n      setValidity(e);\n    }\n\n    setDirty(true);\n    if (typeof onChange === 'function') {\n      onChange(e);\n    }\n  };\n\n  const handleFocus = e => {\n    setFocused(true);\n\n    if (typeof onFocus === 'function') {\n      onFocus(e);\n    }\n  };\n\n  // NOTE: I'd actually separate out getting help text from error text\n  const getHelpOrErrorText = () => {\n    let helpOrErrorText = null;\n    if (showHelpText || showErrorText) {\n      helpOrErrorText = (\n        <InputMessage\n          id={`input-message-${uid}`}\n          show={(showHelpText && Boolean(helpText)) || (showErrorText && Boolean(errorText))}\n          invalid={isInvalid}\n        >\n          {\n            !isInvalid && focused && showHelpText && Boolean(helpText)\n              ? <Fragment>{helpIcon} {helpText}</Fragment>\n              : undefined\n          }\n          {\n            isInvalid === true && showErrorText && Boolean(errorText)\n              ? <Fragment>{errorIcon} {errorText}</Fragment>\n              : undefined\n          }\n        </InputMessage>\n      );\n    }\n    return helpOrErrorText;\n  };\n\n  return (\n    <InputContainer\n      className={classnames(className)}\n      css={css}\n      disabled={disabled}\n      expanded={expanded}\n      filled={filled}\n      focus={focused}\n      readOnly={readOnly}\n      invalid={isInvalid}\n      {...containerProps}\n    >\n      {label ? <InputLabel id={labelId} htmlFor={uid}>{label}</InputLabel> : undefined}\n      <InputBar>\n        <InputInput>\n          { placeholder && !useNativePlaceholder ? <InputHint>{placeholder}</InputHint> : undefined}\n          <InputText\n            aria-describedby={\n              showErrorText || showHelpText\n                ? `input-message-${uid}`\n                : undefined\n            }\n            aria-label={label ? undefined : ariaLabel}\n            aria-invalid={isInvalid}\n            id={uid}\n            disabled={disabled}\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            placeholder={useNativePlaceholder ? placeholder : undefined}\n            readOnly={readOnly}\n            ref={ref}\n            {...remainingProps}\n          />\n        </InputInput>\n        {\n          showCheckmark && typeof isInvalid === 'boolean' && !isInvalid && Boolean(checkmarkIcon)\n            ? <InputOption\n              className={classnames({\n                [`${CSS_STATE}--hidden`]: typeof isInvalid === 'boolean' && isInvalid\n              })}\n            >\n              {checkmarkIcon}\n            </InputOption>\n            : undefined\n        }\n        {children}\n      </InputBar>\n      {getHelpOrErrorText()}\n\n    </InputContainer>\n  );\n});\n\nInput.propTypes = {\n  /**\n   * Aria Label\n   */\n  ariaLabel: string,\n\n  /**\n   *  Checkmark Icon\n   */\n  checkmarkIcon: node,\n\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Container Props\n   */\n  containerProps: object, // eslint-disable-line\n\n  /**\n   * @ignore\n   */\n  css: func,\n\n  /**\n   * Disabled\n   */\n  disabled: bool,\n\n  /**\n   *  Error Message Icon\n   */\n  errorIcon: node,\n\n  /**\n   *  Error Message\n   */\n  errorText: node,\n\n  /**\n   *  Expanded\n   */\n  expanded: bool,\n\n  /**\n   * Input Help Message Icon\n   */\n  helpIcon: node,\n\n  /**\n   * Input Help Message\n   */\n  helpText: node,\n\n  /**\n   * ID\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   * Invalid\n   */\n  invalid: bool,\n\n  /**\n   * Label\n   */\n  label: node,\n\n  /**\n   * Label Id\n   */\n  labelId: oneOfType([number, string]),\n\n  /**\n   * Disable native HTML5 validation e.g. type=email, pattern=\"some regex pattern\"\n   */\n  noValidate: bool,\n\n  /**\n   * Callback fired when the input element loses focus.\n   */\n  onBlur: func,\n\n  /**\n   * On Change\n   */\n  onChange: func,\n\n  /**\n   * Callback fired when the input element is focused on.\n   */\n  onFocus: func,\n\n  /**\n   * Placeholder\n   */\n  placeholder: node,\n\n  /**\n   * ReadOnly\n   */\n  readOnly: bool,\n\n  /**\n   * Show Checkmark Icon\n   */\n  showCheckmark: bool,\n\n  /**\n   * Show Error Message\n   */\n  showErrorText: bool,\n\n  /**\n   * Show Help Message\n   */\n  showHelpText: bool,\n\n  /**\n   * Use native placeholder\n   */\n  useNativePlaceholder: bool\n};\n\nInput.defaultProps = {\n  checkmarkIcon: <Icon name=\"checkmark\" resolution=\"low\" />,\n  errorIcon: <Icon name=\"error\" resolution=\"low\" />\n};\n\nInput.displayName = 'Input';\n\nexport default Input;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-input';\n\nconst InputInput = ({ children, className, ...remainingProps }) => (\n  <div\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nInputInput.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputInput.displayName = 'InputInput';\n\nexport default InputInput;\n","import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRef, useState, useEffect } from 'react';\nimport { NO_INPUT_ERROR, NO_MASK_ERROR, createTextMaskInputElement, isArray, isNil } from '../index';\n/**\n * Custom hook to give an input element Text-Masking capabilities\n * This component will default w/ the empty string as the `value setting\n * @param {Object} props\n * @return {Object} shape is as follows...\n * {\n *    getInputProps: {\n *      onChange: Function,\n *      ref: Object,\n *      value: String -- Defaults to empty string. This may set any `controlled` boolean flags to TRUE (e.g. props.value !== undefined)\n *    },\n *    meta: {\n *      adjustedCaretPosition: (undefined|Number),\n *      placeholder: String\n *    }\n * }\n */\n\nexport default function useTextMask() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$guide = props.guide,\n      guide = _props$guide === void 0 ? false : _props$guide,\n      mask = props.mask,\n      onChange = props.onChange,\n      _props$placeholderCha = props.placeholderChar,\n      placeholderChar = _props$placeholderCha === void 0 ? 'X' : _props$placeholderCha,\n      _props$upperCaseValue = props.upperCaseValue,\n      upperCaseValue = _props$upperCaseValue === void 0 ? false : _props$upperCaseValue,\n      value = props.value;\n  var inputRef = useRef(null);\n  var textMask = useRef(null);\n\n  var _useState = useState({\n    adjustedCaretPosition: undefined,\n    conformedValue: isNil(value) ? '' : value.toString(),\n    placeholder: undefined\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var createTextMask = function createTextMask() {\n    return createTextMaskInputElement({\n      guide: guide,\n      inputElement: inputRef.current,\n      mask: mask,\n      placeholderChar: placeholderChar,\n      upperCaseValue: upperCaseValue\n    });\n  };\n\n  useEffect(function () {\n    textMask.current = createTextMask();\n\n    var _textMask$current$upd = textMask.current.update(),\n        adjustedCaretPosition = _textMask$current$upd.adjustedCaretPosition,\n        conformedValue = _textMask$current$upd.conformedValue,\n        placeholder = _textMask$current$upd.previousPlaceholder;\n\n    setState({\n      adjustedCaretPosition: adjustedCaretPosition,\n      conformedValue: conformedValue,\n      placeholder: placeholder\n    });\n  }, [guide, mask, placeholderChar]);\n  useEffect(function () {\n    if (textMask.current) {\n      var _textMask$current$upd2 = textMask.current.update(value),\n          adjustedCaretPosition = _textMask$current$upd2.adjustedCaretPosition,\n          conformedValue = _textMask$current$upd2.conformedValue,\n          placeholder = _textMask$current$upd2.previousPlaceholder;\n\n      setState({\n        adjustedCaretPosition: adjustedCaretPosition,\n        conformedValue: conformedValue,\n        placeholder: placeholder\n      });\n    }\n  }, [value]);\n  useEffect(function () {\n    if (inputRef.current) {\n      if (isArray(mask) && mask.length > 0) {\n        textMask.current = createTextMask();\n\n        var _textMask$current$upd3 = textMask.current.update(value),\n            adjustedCaretPosition = _textMask$current$upd3.adjustedCaretPosition,\n            conformedValue = _textMask$current$upd3.conformedValue,\n            placeholder = _textMask$current$upd3.previousPlaceholder;\n\n        setState({\n          adjustedCaretPosition: adjustedCaretPosition,\n          conformedValue: conformedValue,\n          placeholder: placeholder\n        });\n      } else {\n        throw new Error(NO_MASK_ERROR);\n      }\n    } else {\n      throw new Error(NO_INPUT_ERROR);\n    }\n  }, []);\n  /**\n   * @param {Event} e\n   * @protected\n   */\n\n  function handleChange(e) {\n    var _textMask$current$upd4 = textMask.current.update(),\n        adjustedCaretPosition = _textMask$current$upd4.adjustedCaretPosition,\n        conformedValue = _textMask$current$upd4.conformedValue,\n        placeholder = _textMask$current$upd4.previousPlaceholder;\n\n    var newState = {\n      adjustedCaretPosition: adjustedCaretPosition,\n      conformedValue: conformedValue,\n      placeholder: placeholder\n    };\n    setState(newState);\n    typeof onChange === 'function' && onChange(e, newState);\n  }\n\n  return {\n    getInputProps: {\n      onChange: handleChange,\n      ref: inputRef,\n      value: state.conformedValue\n    },\n    meta: {\n      adjustedCaretPosition: state.adjustedCaretPosition,\n      placeholder: state.placeholder\n    }\n  };\n}\n/**\n * Render Prop implemention using our custom hook\n * @constructor\n */\n\nexport function TextMaskInput(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return children(useTextMask(props));\n}","export { default as useTextMask, TextMaskInput } from './useTextMask';"],"sourceRoot":""}
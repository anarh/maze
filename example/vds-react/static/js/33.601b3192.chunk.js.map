{"version":3,"sources":["components/toggle-button-set/index.js","components/toggle-button-set-legend/index.js","components/toggle-button-list/index.js","components/toggle-button/index.js","components/toggle-button-list-stateless/index.js","components/toggle-button/example/index.js","pages/components/toggle-button.js","components/screen-reader/index.js","components/data-table/index.js","components/tbody/index.js","components/td/index.js","components/th/index.js","components/thead/index.js","components/tr/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js"],"names":["ToggleButtonSet","children","className","remainingProps","classnames","displayName","ToggleButtonSetLegend","ToggleButtonList","id","shortid","generate","onChange","selectedIndex","useState","selected","setSelected","uid","useRef","current","useEffect","handleChange","e","itemIndex","Children","map","child","k","cloneElement","checked","ToggleButton","focused","label","name","onBlur","onClick","onFocus","value","focus","setFocus","event","type","stopPropagation","onKeyPress","Boolean","htmlFor","ToggleButtonListStateless","ToggleButtonExample","items","state","setState","item","target","tag","key","prettier","require","plugins","reactDocs","jsParsed","replace","exampleCode","componentProps","setComponentProps","parse","console","log","siblingOfStickyFooter","exact","to","process","activeClassName","resolution","match","path","defaultProps","theme","code","language","style","tokens","getLineProps","getTokenProps","line","i","display","opacity","userSelect","width","token","format","ReactDOMServer","renderToStaticMarkup","css","parser","printWidth","dividerLines","size","aria-sort","role","scope","props","Object","entries","filter","doc","description","required","length","color","Array","isArray","v","join","undefined","defaultValue","ScreenReader","forwardRef","ref","Tag","propTypes","node","string","elementType","DataTable","customizableColumns","keyValuePairs","reveal","revealFirstColumn","revealLastColumn","rowSelection","stickyHeader","columns","arrayOf","shape","bool","data","oneOf","Tbody","Td","textAlign","Th","Thead","Tr","alphabet","previousSeed","shuffled","randomFromSeed","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","ind","arr","lastIndexOf","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","_seed_","counter","previousSeconds","str","seconds","Date","now","random","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","Uint8Array","bytes","mask","LN2","step","RegExp","test"],"mappings":"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","file":"static/js/33.601b3192.chunk.js","sourcesContent":["import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-toggle-button-set';\n\nconst ToggleButtonSet = ({ children, className, ...remainingProps }) => (\n  <fieldset\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </fieldset>\n);\n\nToggleButtonSet.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nToggleButtonSet.displayName = 'ToggleButtonSet';\n\nexport default ToggleButtonSet;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-toggle-button-set-legend';\n\nconst ToggleButtonSetLegend = ({ children, className, ...remainingProps }) => (\n  <legend\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </legend>\n);\n\nToggleButtonSetLegend.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nToggleButtonSetLegend.displayName = 'ToggleButtonSetLegend';\n\nexport default ToggleButtonSetLegend;\n","import React, { Children, cloneElement, useEffect, useRef, useState } from 'react';\nimport { func, node, number, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\nimport shortid from 'shortid';\n\nconst CSS_PREFIX = 'vds-toggle-button-list';\n\nconst ToggleButtonList = ({\n  children,\n  className,\n  id = shortid.generate(),\n  onChange,\n  selectedIndex,\n  ...remainingProps\n}) => {\n  const [selected, setSelected] = useState(selectedIndex);\n  const uniqueId = useRef(id);\n  const uid = uniqueId.current;\n\n  useEffect(() => {\n    setSelected(selectedIndex);\n  }, [selectedIndex]);\n\n  const handleChange = (e, itemIndex) => {\n    setSelected(itemIndex);\n\n    if (typeof onChange === 'function') {\n      onChange(e, itemIndex);\n    }\n  };\n\n  return (\n    <ul\n      className={classnames(CSS_PREFIX, className)}\n      id={uid}\n      {...remainingProps}\n    >\n      {\n        Children.map(children, (child, k) => cloneElement(child, {\n          checked: k === selected,\n          id: `${uid}-${k}`,\n          onChange: e => handleChange(e, k)\n        }))\n      }\n    </ul>\n  );\n};\n\nToggleButtonList.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * ID for <ul />\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   * Callback fired when a ToggleButton input value changes.\n   */\n  onChange: func,\n\n  /**\n   * Index of list item to select, where 0 represents the first list item.\n   */\n  selectedIndex: number\n};\n\nToggleButtonList.displayName = 'ToggleButtonList';\n\nexport default ToggleButtonList;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { bool, func, number, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-toggle-button';\nconst CSS_STATE = 'vds-state';\n\nconst ToggleButton = ({\n  checked,\n  className,\n  focused,\n  id,\n  label,\n  name,\n  onBlur,\n  onClick,\n  onChange,\n  onFocus,\n  value,\n  ...remainingProps\n}) => {\n  const [focus, setFocus] = useState(focused);\n  const uniqueId = useRef(id);\n  const uid = uniqueId.current;\n\n  useEffect(() => {\n    setFocus(focused);\n  }, [focused]);\n\n  const handleFocus = event => {\n    setFocus(true);\n\n    if (typeof onFocus === 'function') {\n      onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    setFocus(false);\n\n    if (typeof onBlur === 'function') {\n      onBlur(event);\n    }\n  };\n  return (\n    <li\n      className={classnames(`${CSS_PREFIX}-item`, className)}\n    >\n      <input\n        checked={checked}\n        className={CSS_PREFIX}\n        id={uid}\n        name={name}\n        onBlur={handleBlur}\n        onChange={onChange}\n        onClick={onClick}\n        onFocus={handleFocus}\n        type=\"radio\"\n        value={value}\n        {...remainingProps}\n      />\n      <label\n        onClick={e => e.stopPropagation()}\n        onKeyPress={e => e.stopPropagation()}\n        className={classnames(`${CSS_PREFIX}-label`, {\n          [`${CSS_STATE}--selected`]: Boolean(checked),\n          [`${CSS_STATE}--focus`]: Boolean(focus)\n        })}\n        htmlFor={uid}\n      >\n        {label}\n      </label>\n    </li>\n  );\n};\n\nToggleButton.propTypes = {\n  /**\n   * A Boolean attribute which, if present, indicates that this\n   * radio button is the currently selected one in the group\n   */\n  checked: bool,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * If true, will put component in a \"focused\" state.\n   */\n  focused: bool,\n\n  /**\n   * Id for toggle button.\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   * Label for toggle button.\n   */\n  label: string,\n\n  /**\n   * Name for toggle button.\n   */\n  name: string.isRequired,\n\n  /**\n   * Callback fired when the input element loses focus.\n   */\n  onBlur: func,\n\n  /**\n   * Callback fired when the input value changes.\n   */\n  onChange: func,\n\n  /**\n   * Callback fired when the input is clicked.\n   */\n  onClick: func,\n\n  /**\n   * Callback fired when the input element is focused on.\n   */\n  onFocus: func,\n\n  /**\n   * The value attribute serves a special purpose for inputs of type radio:\n   * when a form is submitted, only radio buttons which are currently checked are\n   * submitted to the server, and the reported value is the value of\n   * the value attribute. If the value is not otherwise specified,\n   * it is the string \"on\" by default.\n   */\n  value: string.isRequired\n};\n\nToggleButton.displayName = 'ToggleButton';\n\nexport default ToggleButton;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-toggle-button-list';\n\nconst ToggleButtonListStateless = ({ children, className, ...remainingProps }) => (\n  <ul\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </ul>\n);\n\nToggleButtonListStateless.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nToggleButtonListStateless.displayName = 'ToggleButtonListStateless';\n\nexport default ToggleButtonListStateless;\n","import React, { useState } from 'react';\nimport Col from '../../col';\nimport Grid from '../../grid';\nimport Row from '../../row';\nimport Typography from '../../typography';\nimport ToggleButtonSet from '../../toggle-button-set';\nimport ToggleButtonSetLegend from '../../toggle-button-set-legend';\nimport ToggleButtonList from '../../toggle-button-list';\nimport ToggleButton from '../../toggle-button';\nimport ToggleButtonListStateless from '../../toggle-button-list-stateless';\n\nconst ToggleButtonExample = () => {\n  const [state, setState] = useState({\n    items: [\n      {\n        checked: false,\n        label: 'One',\n        value: 'one'\n      },\n      {\n        checked: true,\n        label: 'Two',\n        value: 'Two'\n      },\n      {\n        checked: false,\n        label: 'Three',\n        value: 'three'\n      },\n      {\n        checked: false,\n        label: 'Four',\n        value: 'four'\n      }\n    ]\n  });\n\n  const handleChange = e => setState({\n    items: [...state.items.map(item => ({ ...item, checked: item.value === e.target.value }))]\n  });\n\n  return (\n    <Grid>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Toggle Button</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ToggleButtonSet>\n            <ToggleButtonSetLegend>Select a button</ToggleButtonSetLegend>\n            <ToggleButtonList>\n              <ToggleButton\n                name=\"toggle-button-test-1\"\n                id=\"toggle-button-test-11\"\n                label=\"One\"\n                value=\"test\"\n              />\n              <ToggleButton\n                name=\"toggle-button-test-1\"\n                id=\"toggle-button-test-22\"\n                label=\"Two\"\n                value=\"test2\"\n              />\n              <ToggleButton\n                name=\"toggle-button-test-1\"\n                id=\"toggle-button-test-33\"\n                label=\"Three\"\n                value=\"test3\"\n              />\n            </ToggleButtonList>\n          </ToggleButtonSet>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Toggle Button Pre-Selected</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ToggleButtonSet>\n            <ToggleButtonSetLegend>Select a button</ToggleButtonSetLegend>\n            <ToggleButtonList selectedIndex={2}>\n              <ToggleButton\n                name=\"toggle-button-test-2\"\n                id=\"toggle-button-test-14\"\n                label=\"One\"\n                value=\"test\"\n              />\n              <ToggleButton\n                name=\"toggle-button-test-2\"\n                id=\"toggle-button-test-25\"\n                label=\"Two\"\n                value=\"test2\"\n              />\n              <ToggleButton\n                name=\"toggle-button-test-2\"\n                id=\"toggle-button-test-36\"\n                label=\"Three\"\n                value=\"test3\"\n              />\n            </ToggleButtonList>\n          </ToggleButtonSet>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Toggle Button Stateless (BYO-State)</Typography>\n          <Typography>See &quot;VIEW CODE&quot; below</Typography>\n          <Typography>Use this approach to create your own wrapper to match the shape of your data and how and where the data should be manipulated</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ToggleButtonSet>\n            <ToggleButtonSetLegend>Select a button</ToggleButtonSetLegend>\n            <ToggleButtonListStateless>\n              {\n                state.items.map((item, k) => (\n                  <ToggleButton\n                    key={k}\n                    checked={item.checked}\n                    id={`toggle-button-${k}`}\n                    label={item.label}\n                    name=\"toggle-stateless\"\n                    onChange={handleChange}\n                    value={item.value}\n                  />\n                ))\n              }\n            </ToggleButtonListStateless>\n          </ToggleButtonSet>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nexport default ToggleButtonExample;\n","/* This file is autogenerated  DO NOT EDIT */\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport classnames from 'classnames';\nimport raw from \"raw.macro\";\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport theme from 'prism-react-renderer/themes/github';\nimport { NavLink } from 'react-router-dom';\n\nimport Col from '../../components/col';\nimport DataTable from '../../components/data-table';\nimport Icon from '../../components/icon';\nimport Grid from '../../components/grid';\nimport Row from '../../components/row';\nimport ScreenReader from '../../components/screen-reader';\nimport Tab from '../../components/tab';\nimport TabList from '../../components/tab-list';\nimport Tbody from '../../components/tbody';\nimport Td from '../../components/td';\nimport Th from '../../components/th';\nimport Thead from '../../components/thead';\nimport Tr from '../../components/tr';\nimport Typography from '../../components/typography';\n\nimport Example from '../../components/toggle-button/example';\n\nconst prettier = require(\"prettier/standalone\");\nconst plugins = [require(\"prettier/parser-html\")];\nconst reactDocs = require('react-docgen');\nconst js = raw('../../components/toggle-button/index.js');\nconst jsParsed = js.replace('= memo(({', '= React.forwardRef(({').replace('cloneElement(', 'React.cloneElement('); // see https://github.com/reactjs/react-docgen/issues/342\nconst exampleCodeRaw = raw('../../components/toggle-button/example/index.js');\nconst exampleCode = exampleCodeRaw.replace(/'..\\/..\\//g, `'@visa/vds-react/`);\n\nconst ToggleButtonExample = ({ ...remainingProps }) => {\n  const [componentProps, setComponentProps] = useState({});\n\n  useEffect(() => {\n    try {\n      setComponentProps(reactDocs.parse(jsParsed));\n    } catch {\n      // eslint-disable-next-line\n      console.log(`\n        React-docgen could not parse props for ToggleButton\n        check for fix here https://github.com/reactjs/react-docgen/issues/342`);\n    }\n  }, []);\n\n  return (\n    <Grid siblingOfStickyFooter>\n      <Row>\n        <Col>\n          <Typography tag=\"h1\">Toggle Button</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <TabList>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/toggle-button`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"log\" resolution=\"low\" />Toggle Button Example\n            </Tab>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/toggle-button/code`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />JSX of Example\n            </Tab>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/toggle-button/html`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />HTML of Example\n            </Tab>\n          </TabList>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/toggle-button`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/toggle-button`\n            })}\n          >\n            <Example {...remainingProps} />\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/toggle-button/code`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/toggle-button/code`\n            })}\n          >\n            <Highlight {...defaultProps} theme={theme} code={exampleCode} language=\"jsx\">\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })} key={i}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} key={key} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/toggle-button/html`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/toggle-button/html`\n            })}\n          >\n            <Highlight\n              {...defaultProps}\n              theme={theme}\n              code={prettier.format(ReactDOMServer.renderToStaticMarkup(<Example {...remainingProps} />), { css: 'ignore', parser: 'html', plugins, printWidth: 120 })}\n              language=\"html\"\n            >\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })} key={i}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} key={key} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <DataTable\n            className={classnames([\n              'components'\n            ])}\n            dividerLines\n            size=\"compact\"\n          >\n            <ScreenReader tag=\"caption\">Props</ScreenReader>\n            <Thead>\n              <Tr className=\"vds-tr\">\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Prop\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Type\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Default\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Description\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {\n                componentProps.props && Object.entries(componentProps.props)\n                  .filter(doc => doc[1].description !== '@ignore')\n                  .map((doc, i) => (\n                    <Tr className=\"vds-tr\" key={i}>\n                      <Td className=\"vds-td\">\n                        {doc[0]} {doc[1].required ? <strong> - required</strong> : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        <strong>{doc[1].type.name}</strong>\n                        {\n                          doc[1].type.value && doc[1].type.value.length\n                            ? <small style={{ color: '#1a1f71' }}><br />\n                              {\n                                Array.isArray(doc[1].type.value)\n                                  ? doc[1].type.value.map(v => v.value || v.name).join(', ')\n                                  : typeof doc[1].type.value === 'string'\n                                    ? doc[1].type.value\n                                    : undefined\n                              }\n                            </small>\n                            : ''\n                        }\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].defaultValue ? doc[1].defaultValue.value : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].description}\n                      </Td>\n                    </Tr>\n                  ))\n              }\n            </Tbody>\n          </DataTable>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nToggleButtonExample.displayName = 'ToggleButtonExample';\n\nexport default ToggleButtonExample;\n","import React, { forwardRef } from 'react';\nimport { elementType, node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-screen-reader';\n\nconst ScreenReader = forwardRef(({ children, className, tag: Tag, ...remainingProps }, ref) => (\n  <Tag\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </Tag>\n));\n\nScreenReader.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n  * Tag\n  */\n  tag: elementType\n};\n\nScreenReader.defaultProps = {\n  tag: 'span'\n};\n\nScreenReader.displayName = 'ScreenReader';\n\nexport default ScreenReader;\n","import React, { forwardRef } from 'react';\nimport { arrayOf, bool, node, oneOf, shape, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-data-table';\nconst CSS_STATE = 'vds-state';\n\nconst DataTable = forwardRef(({\n  children,\n  className,\n  customizableColumns,\n  dividerLines,\n  keyValuePairs,\n  reveal,\n  revealFirstColumn,\n  revealLastColumn,\n  rowSelection,\n  size,\n  stickyHeader,\n  ...remainingProps\n}, ref) => (\n  <table\n    {...remainingProps}\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_STATE}--customizable-columns`]: Boolean(customizableColumns),\n      [`${CSS_STATE}--divider-lines`]: Boolean(dividerLines),\n      [`${CSS_STATE}--key-value-pairs`]: Boolean(keyValuePairs),\n      [`${CSS_STATE}--${size}`]: Boolean(size),\n      [`${CSS_STATE}--reveal`]: Boolean(reveal),\n      [`${CSS_STATE}--reveal-first-column`]: Boolean(revealFirstColumn),\n      [`${CSS_STATE}--reveal-last-column`]: Boolean(revealLastColumn),\n      [`${CSS_STATE}--${rowSelection}`]: Boolean(rowSelection),\n      [`${CSS_STATE}--sticky-header`]: Boolean(stickyHeader)\n    }, className)}\n    ref={ref}\n  >\n    {children}\n  </table>\n));\n\nDataTable.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Columns\n   */\n  columns: arrayOf(shape({})),\n\n  /**\n   * Customizable columns\n   */\n  customizableColumns: bool,\n\n  /**\n   * Data\n   */\n  data: arrayOf(shape({})),\n\n  /**\n   * Divider lines\n   */\n  dividerLines: bool,\n\n  /**\n   * Key value pairs\n   */\n  keyValuePairs: bool,\n\n  /**\n   * Reveal\n   */\n  reveal: bool,\n\n  /**\n   * Reveal first column\n   */\n  revealFirstColumn: bool,\n\n  /**\n   * Reveal last column\n   */\n  revealLastColumn: bool,\n\n  /**\n   * Row Selection\n   */\n  rowSelection: oneOf(['multi-select', 'single-select']),\n\n  /**\n   * Size\n   */\n  size: oneOf(['compact']),\n\n  /**\n   * Sticky Header\n   */\n  stickyHeader: bool\n};\n\nDataTable.displayName = 'DataTable';\n\nexport default DataTable;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tbody';\n\nconst Tbody = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tbody\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tbody>\n));\n\nTbody.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTbody.displayName = 'Tbody';\n\nexport default Tbody;\n","import React, { forwardRef } from 'react';\nimport { node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-td';\n\nconst Td = forwardRef(({\n  children,\n  className,\n  textAlign,\n  ...remainingProps\n}, ref) => (\n  <td\n    className={classnames(CSS_PREFIX, {\n      [`vds-text--${textAlign}`]: Boolean(textAlign)\n    }, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </td>\n));\n\nTd.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Text alignment at all sizes\n   */\n  textAlign: oneOf(['center', 'left', 'right'])\n};\n\nTd.displayName = 'Td';\n\nexport default Td;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-th';\n\nconst Th = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <th\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </th>\n));\n\nTh.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTh.displayName = 'Th';\n\nexport default Th;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-thead';\n\nconst Thead = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <thead\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </thead>\n));\n\nThead.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nThead.displayName = 'Thead';\n\nexport default Thead;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tr';\n\nconst Tr = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tr\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tr>\n));\n\nTr.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTr.displayName = 'Tr';\n\nexport default Tr;\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n"],"sourceRoot":""}
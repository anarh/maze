{"version":3,"sources":["components/action-bar/index.js","components/action-bar-selected-items-count/index.js","components/action-bar/example/index.js","pages/components/action-bar.js","components/screen-reader/index.js","components/data-table/index.js","components/tbody/index.js","components/td/index.js","components/th/index.js","components/thead/index.js","components/tr/index.js","components/button-label/index.js","components/button-text/index.js","components/button-icon/index.js","components/input-container/index.js","components/input-label/index.js","components/input-bar/index.js","components/input-option/index.js","components/input-hint/index.js","components/input-text/index.js","components/input-message/index.js","components/input/index.js","components/input-input/index.js","components/tooltip/index.js","components/search/index.js","components/search-clear-button/index.js","components/search-icon/index.js"],"names":["ActionBar","ariaLabel","children","className","role","type","remainingProps","aria-label","classnames","Boolean","defaultProps","displayName","ActionBarSelectedItemsCount","ActionBarExample","useState","value","state","setState","showActiveTooltip","setShowActiveTooltip","showAlternateTooltip","setShowAlternateTooltip","tag","noGutter","flippable","colorScheme","name","resolution","alignEnd","dynamic","autoComplete","onChange","e","target","placeholder","useNativePlaceholder","length","iconType","onClick","undefined","id","tooltip","tooltipShown","placement","trigger","aria-describedby","onFocus","onBlur","onMouseEnter","onMouseLeave","prettier","require","plugins","reactDocs","jsParsed","replace","exampleCode","componentProps","setComponentProps","useEffect","parse","console","log","siblingOfStickyFooter","exact","to","process","activeClassName","match","path","theme","code","language","style","tokens","getLineProps","getTokenProps","map","line","i","key","display","opacity","userSelect","width","token","format","ReactDOMServer","renderToStaticMarkup","css","parser","printWidth","dividerLines","size","aria-sort","scope","props","Object","entries","filter","doc","description","tabIndex","required","color","Array","isArray","v","join","defaultValue","ScreenReader","forwardRef","ref","Tag","propTypes","node","string","elementType","DataTable","customizableColumns","keyValuePairs","reveal","revealFirstColumn","revealLastColumn","rowSelection","stickyHeader","columns","arrayOf","shape","bool","data","oneOf","Tbody","Td","textAlign","Th","Thead","Tr","ButtonLabel","ButtonText","active","disabled","isFullWidth","includes","oneOfType","number","ButtonIcon","isRequired","InputContainer","expanded","filled","focus","invalid","isTextarea","readOnly","InputLabel","InputBar","InputOption","InputHint","InputText","InputMessage","show","Input","checkmarkIcon","containerProps","errorIcon","errorText","helpIcon","helpText","shortid","generate","label","labelId","noValidate","showCheckmark","showErrorText","showHelpText","dirty","setDirty","setFilled","focused","setFocused","isInvalid","setIsInvalid","uid","useRef","current","setValidity","checkValidity","trim","htmlFor","aria-invalid","helpOrErrorText","getHelpOrErrorText","InputInput","Tooltip","modifiers","offset","enabled","getTooltipProps","tooltipRef","getTriggerProps","triggerRef","cloneElement","aria-hidden","Search","container","expandable","navbar","SearchClearButton","SearchIcon"],"mappings":"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","file":"static/js/20.6b8c9767.chunk.js","sourcesContent":["import React from 'react';\nimport { node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-action-bar';\n\nconst ActionBar = ({ ariaLabel, children, className, role, type, ...remainingProps }) => (\n  <div\n    aria-label={ariaLabel}\n    className={classnames('row', CSS_PREFIX, {\n      [`${CSS_PREFIX}--${type}-controls`]: Boolean(type)\n    }, className)}\n    role={role}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nActionBar.propTypes = {\n  /**\n   * @ignore\n   */\n  ariaLabel: string,\n\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * @ignore\n   */\n  role: string,\n\n  /**\n   * Active\n   */\n  type: oneOf(['active', 'standard'])\n};\n\nActionBar.defaultProps = {\n  ariaLabel: 'action bar',\n  role: 'region'\n};\n\nActionBar.displayName = 'ActionBar';\n\nexport default ActionBar;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-action-bar-selected-items-count';\n\nconst ActionBarSelectedItemsCount = ({ children, className, ...remainingProps }) => (\n  <div\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nActionBarSelectedItemsCount.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nActionBarSelectedItemsCount.displayName = 'ActionBarSelectedItemsCount';\n\nexport default ActionBarSelectedItemsCount;\n","import React, { useState } from 'react';\nimport ActionBar from '../../action-bar';\nimport ActionBarSelectedItemsCount from '../../action-bar-selected-items-count';\nimport ButtonAction from '../../button-action';\nimport ButtonIcon from '../../button-icon';\nimport ButtonLabel from '../../button-label';\nimport ButtonSplit from '../../button-split';\nimport ButtonText from '../../button-text';\nimport Col from '../../col';\nimport Grid from '../../grid';\nimport Icon from '../../icon';\nimport Input from '../../input';\nimport Row from '../../row';\nimport Search from '../../search';\nimport SearchClearButton from '../../search-clear-button';\nimport SearchIcon from '../../search-icon';\nimport Tooltip from '../../tooltip';\nimport Typography from '../../typography';\n\nconst ActionBarExample = () => {\n  const [state, setState] = useState({\n    value: ''\n  });\n  const [showActiveTooltip, setShowActiveTooltip] = useState(false);\n  const [showAlternateTooltip, setShowAlternateTooltip] = useState(false);\n\n  return (\n    <Grid>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Standard Controls</Typography>\n          <Typography>\n            Action bar will load actions that the user can\n            apply or initiate broadly to the page content loaded.\n            These actions allow users to manipulate the items loaded such as sort and filter.\n          </Typography>\n          <Typography>\n            If using icon buttons, include a tooltip\n            for additional clarity.\n          </Typography>\n          <Typography>\n            At this point, user has not made any selection\n            of items in the grid, table or list.\n          </Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ActionBar>\n            <Col noGutter>\n              <ButtonText>Create Alert</ButtonText>\n              <ButtonSplit flippable colorScheme=\"secondary\">\n                <ButtonLabel>Export</ButtonLabel>\n                <ButtonAction><Icon name=\"arrow-expand\" resolution=\"tiny\" /></ButtonAction>\n              </ButtonSplit>\n            </Col>\n            <Col noGutter alignEnd>\n              <Search dynamic>\n                <Input\n                  ariaLabel=\"Search\"\n                  autoComplete=\"off\"\n                  name=\"q\"\n                  onChange={e => setState({ value: e.target.value })}\n                  placeholder=\"Search\"\n                  type=\"search\"\n                  useNativePlaceholder\n                  value={state.value}\n                />\n                <SearchIcon>\n                  <Icon name=\"search\" resolution=\"low\" />\n                </SearchIcon>\n                {\n                  state.value.length\n                    ? <SearchClearButton>\n                      <ButtonIcon\n                        ariaLabel=\"clear entry\"\n                        iconType=\"light-tiny\"\n                        onClick={() => setState({ value: '' })}\n                      >\n                        <Icon name=\"clear\" resolution=\"tiny\" />\n                      </ButtonIcon>\n                    </SearchClearButton>\n                    : undefined\n                }\n              </Search>\n              <ButtonSplit flippable colorScheme=\"secondary\">\n                <ButtonLabel>Sort</ButtonLabel>\n                <ButtonAction><Icon name=\"arrow-expand\" resolution=\"tiny\" /></ButtonAction>\n              </ButtonSplit>\n            </Col>\n          </ActionBar>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Active Controls</Typography>\n          <Typography>\n            Once the user has made one or more item selections,\n            the action bar will contextually change to host controls\n            that can be applied. It will also list how many active items.\n          </Typography>\n          <Typography>\n            If using icon buttons, include a tooltip for additional clarity.\n          </Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ActionBar type=\"active\">\n            <Col noGutter>\n              <ButtonSplit flippable>\n                <ButtonLabel>Add New</ButtonLabel>\n                <ButtonAction><Icon name=\"arrow-expand\" resolution=\"tiny\" /></ButtonAction>\n              </ButtonSplit>\n              <ButtonText colorScheme=\"secondary\">Close</ButtonText>\n              <ButtonText colorScheme=\"secondary\">Force Close</ButtonText>\n              <ButtonText colorScheme=\"secondary\">Acknowledge</ButtonText>\n            </Col>\n            <Col noGutter alignEnd>\n              <ActionBarSelectedItemsCount id=\"selection-count-active\">1 selected</ActionBarSelectedItemsCount>\n              <Tooltip\n                tooltip=\"Clear Selection\"\n                tooltipShown={showActiveTooltip}\n                placement=\"top\"\n                trigger=\"none\"\n                id=\"tooltip-close-active\"\n              >\n                <ButtonIcon\n                  aria-describedby=\"selection-count-active\"\n                  ariaLabel=\"clear selection\"\n                  iconType=\"light\"\n                  onFocus={() => setShowActiveTooltip(true)}\n                  onBlur={() => setShowActiveTooltip(false)}\n                  onMouseEnter={() => setShowActiveTooltip(true)}\n                  onMouseLeave={() => setShowActiveTooltip(false)}\n                >\n                  <Icon name=\"close\" resolution=\"low\" />\n                </ButtonIcon>\n              </Tooltip>\n            </Col>\n          </ActionBar>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Active Controls: Alternate Layout</Typography>\n          <Typography>\n            Adjust the hierarchy of the controls in the action bar as\n            needed and as it relates to the other elements on the page.\n          </Typography>\n          <Typography>\n            Maintain appropriate hierarchy among items in the set as well and use overflow when needed.\n          </Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ActionBar type=\"active\">\n            <Col noGutter>\n              <ActionBarSelectedItemsCount id=\"selection-count-alternate\" >1 selected</ActionBarSelectedItemsCount>\n              <ButtonText\n                colorScheme=\"tertiary\"\n                aria-describedby=\"selection-count-alternate\"\n              >\n                Clear\n              </ButtonText>\n            </Col>\n            <Col noGutter alignEnd>\n              <ButtonText colorScheme=\"tertiary\">Close</ButtonText>\n              <ButtonText colorScheme=\"tertiary\">Force Close</ButtonText>\n              <ButtonText colorScheme=\"tertiary\">Acknowledge</ButtonText>\n              <Tooltip\n                tooltip=\"More Actions\"\n                tooltipShown={showAlternateTooltip}\n                placement=\"top\"\n                trigger=\"none\"\n                id=\"tooltip-close-alternate\"\n              >\n                <ButtonIcon\n                  ariaLabel=\"more actions\"\n                  iconType=\"light\"\n                  onFocus={() => setShowAlternateTooltip(true)}\n                  onBlur={() => setShowAlternateTooltip(false)}\n                  onMouseEnter={() => setShowAlternateTooltip(true)}\n                  onMouseLeave={() => setShowAlternateTooltip(false)}\n                >\n                  <Icon name=\"options\" resolution=\"tiny\" />\n                </ButtonIcon>\n              </Tooltip>\n            </Col>\n          </ActionBar>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nexport default ActionBarExample;\n","/* This file is autogenerated  DO NOT EDIT */\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport classnames from 'classnames';\nimport raw from \"raw.macro\";\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport theme from 'prism-react-renderer/themes/github';\nimport { NavLink } from 'react-router-dom';\n\nimport Col from '../../components/col';\nimport DataTable from '../../components/data-table';\nimport Icon from '../../components/icon';\nimport Grid from '../../components/grid';\nimport Row from '../../components/row';\nimport ScreenReader from '../../components/screen-reader';\nimport Tab from '../../components/tab';\nimport TabList from '../../components/tab-list';\nimport Tbody from '../../components/tbody';\nimport Td from '../../components/td';\nimport Th from '../../components/th';\nimport Thead from '../../components/thead';\nimport Tr from '../../components/tr';\nimport Typography from '../../components/typography';\n\nimport Example from '../../components/action-bar/example';\n\nconst prettier = require(\"prettier/standalone\");\nconst plugins = [require(\"prettier/parser-html\")];\nconst reactDocs = require('react-docgen');\nconst js = raw('../../components/action-bar/index.js');\nconst jsParsed = js.replace('= memo(({', '= React.forwardRef(({').replace('cloneElement(', 'React.cloneElement('); // see https://github.com/reactjs/react-docgen/issues/342\nconst exampleCodeRaw = raw('../../components/action-bar/example/index.js');\nconst exampleCode = exampleCodeRaw.replace(/'..\\/..\\//g, `'@visa/vds-react/`);\n\nconst ActionBarExample = ({ ...remainingProps }) => {\n  const [componentProps, setComponentProps] = useState({});\n\n  useEffect(() => {\n    try {\n      setComponentProps(reactDocs.parse(jsParsed));\n    } catch {\n      // eslint-disable-next-line\n      console.log(`\n        React-docgen could not parse props for ActionBar\n        check for fix here https://github.com/reactjs/react-docgen/issues/342`);\n    }\n  }, []);\n\n  return (\n    <Grid siblingOfStickyFooter>\n      <Row>\n        <Col>\n          <Typography tag=\"h1\">Action Bar</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <TabList>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/action-bar`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"log\" resolution=\"low\" />Action Bar Example\n            </Tab>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/action-bar/code`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />JSX of Example\n            </Tab>\n            <Tab tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/action-bar/html`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />HTML of Example\n            </Tab>\n          </TabList>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/action-bar`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/action-bar`\n            })}\n          >\n            <Example {...remainingProps} />\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/action-bar/code`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/action-bar/code`\n            })}\n          >\n            <Highlight {...defaultProps} theme={theme} code={exampleCode} language=\"jsx\">\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/action-bar/html`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/action-bar/html`\n            })}\n          >\n            <Highlight\n              {...defaultProps}\n              theme={theme}\n              code={prettier.format(ReactDOMServer.renderToStaticMarkup(<Example {...remainingProps} />), { css: 'ignore', parser: 'html', plugins, printWidth: 120 })}\n              language=\"html\"\n            >\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <DataTable\n            className={classnames([\n              'components'\n            ])}\n            dividerLines\n            size=\"compact\"\n          >\n            <ScreenReader tag=\"caption\">Props</ScreenReader>\n            <Thead>\n              <Tr className=\"vds-tr\">\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Prop\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Type\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Default\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Description\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {\n                componentProps.props && Object.entries(componentProps.props)\n                  .filter(doc => doc[1].description !== '@ignore')\n                  .map((doc, i) => (\n                    <Tr className=\"vds-tr\" key={i} tabIndex=\"0\">\n                      <Td className=\"vds-td\">\n                        {doc[0]} {doc[1].required ? <sup style={{ color: 'red' }}> required</sup> : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        <strong>{doc[1].type.name}</strong>\n                        {\n                          doc[1].type.value && doc[1].type.value.length\n                            ? <small style={{ color: '#1a1f71' }}><br />\n                              {\n                                Array.isArray(doc[1].type.value)\n                                  ? doc[1].type.value.map(v => v.value || v.name).join(', ')\n                                  : typeof doc[1].type.value === 'string'\n                                    ? doc[1].type.value\n                                    : undefined\n                              }\n                            </small>\n                            : ''\n                        }\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].defaultValue ? doc[1].defaultValue.value : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].description}\n                      </Td>\n                    </Tr>\n                  ))\n              }\n            </Tbody>\n          </DataTable>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nActionBarExample.displayName = 'ActionBarExample';\n\nexport default ActionBarExample;\n","import React, { forwardRef } from 'react';\nimport { elementType, node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-screen-reader';\n\nconst ScreenReader = forwardRef(({ children, className, tag: Tag, ...remainingProps }, ref) => (\n  <Tag\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </Tag>\n));\n\nScreenReader.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n  * Tag\n  */\n  tag: elementType\n};\n\nScreenReader.defaultProps = {\n  tag: 'span'\n};\n\nScreenReader.displayName = 'ScreenReader';\n\nexport default ScreenReader;\n","import React, { forwardRef } from 'react';\nimport { arrayOf, bool, node, oneOf, shape, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-data-table';\nconst CSS_STATE = 'vds-state';\n\nconst DataTable = forwardRef(({\n  children,\n  className,\n  customizableColumns,\n  dividerLines,\n  keyValuePairs,\n  reveal,\n  revealFirstColumn,\n  revealLastColumn,\n  rowSelection,\n  size,\n  stickyHeader,\n  ...remainingProps\n}, ref) => (\n  <table\n    {...remainingProps}\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_STATE}--customizable-columns`]: Boolean(customizableColumns),\n      [`${CSS_STATE}--divider-lines`]: Boolean(dividerLines),\n      [`${CSS_STATE}--key-value-pairs`]: Boolean(keyValuePairs),\n      [`${CSS_STATE}--${size}`]: Boolean(size),\n      [`${CSS_STATE}--reveal`]: Boolean(reveal),\n      [`${CSS_STATE}--reveal-first-column`]: Boolean(revealFirstColumn),\n      [`${CSS_STATE}--reveal-last-column`]: Boolean(revealLastColumn),\n      [`${CSS_STATE}--${rowSelection}`]: Boolean(rowSelection),\n      [`${CSS_STATE}--sticky-header`]: Boolean(stickyHeader)\n    }, className)}\n    ref={ref}\n  >\n    {children}\n  </table>\n));\n\nDataTable.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Columns\n   */\n  columns: arrayOf(shape({})),\n\n  /**\n   * Customizable columns\n   */\n  customizableColumns: bool,\n\n  /**\n   * Data\n   */\n  data: arrayOf(shape({})),\n\n  /**\n   * Divider lines\n   */\n  dividerLines: bool,\n\n  /**\n   * Key value pairs\n   */\n  keyValuePairs: bool,\n\n  /**\n   * Reveal\n   */\n  reveal: bool,\n\n  /**\n   * Reveal first column\n   */\n  revealFirstColumn: bool,\n\n  /**\n   * Reveal last column\n   */\n  revealLastColumn: bool,\n\n  /**\n   * Row Selection\n   */\n  rowSelection: oneOf(['multi-select', 'single-select']),\n\n  /**\n   * Size\n   */\n  size: oneOf(['compact']),\n\n  /**\n   * Sticky Header\n   */\n  stickyHeader: bool\n};\n\nDataTable.displayName = 'DataTable';\n\nexport default DataTable;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tbody';\n\nconst Tbody = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tbody\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tbody>\n));\n\nTbody.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTbody.displayName = 'Tbody';\n\nexport default Tbody;\n","import React, { forwardRef } from 'react';\nimport { node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-td';\n\nconst Td = forwardRef(({\n  children,\n  className,\n  textAlign,\n  ...remainingProps\n}, ref) => (\n  <td\n    className={classnames(CSS_PREFIX, {\n      [`vds-text--${textAlign}`]: Boolean(textAlign)\n    }, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </td>\n));\n\nTd.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Text alignment at all sizes\n   */\n  textAlign: oneOf(['center', 'left', 'right'])\n};\n\nTd.displayName = 'Td';\n\nexport default Td;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-th';\n\nconst Th = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <th\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </th>\n));\n\nTh.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTh.displayName = 'Th';\n\nexport default Th;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-thead';\n\nconst Thead = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <thead\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </thead>\n));\n\nThead.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nThead.displayName = 'Thead';\n\nexport default Thead;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tr';\n\nconst Tr = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tr\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tr>\n));\n\nTr.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTr.displayName = 'Tr';\n\nexport default Tr;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-btn-label';\n\nconst ButtonLabel = ({ children, className, ...remainingProps }) => (\n  <span\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </span>\n);\n\nButtonLabel.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nButtonLabel.displayName = 'ButtonLabel';\n\nexport default ButtonLabel;\n","import React, { forwardRef } from 'react';\nimport { bool, node, number, oneOf, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\nimport ButtonLabel from '../button-label';\n\nconst CSS_PREFIX = 'vds-btn-text';\nconst CSS_STATE = 'vds-state';\n\nconst ButtonText = forwardRef(({\n  active,\n  children,\n  className,\n  colorScheme,\n  disabled,\n  flippable,\n  isFullWidth,\n  role,\n  tabIndex,\n  tag: Tag,\n  type,\n  ...remainingProps\n}, ref) => (\n  <Tag\n    className={classnames({\n      [`${CSS_PREFIX}`]: Boolean(colorScheme) === false,\n      [`${CSS_STATE}--active`]: Boolean(active),\n      [`${CSS_PREFIX}--${colorScheme}`]: Boolean(colorScheme),\n      [`${CSS_STATE}--flippable`]: Boolean(flippable),\n      [`${CSS_PREFIX}--fullwidth`]: Boolean(isFullWidth),\n      [`${CSS_STATE}--disabled`]: Boolean(disabled)\n    }, className)}\n    disabled={disabled}\n    role={Tag === 'button' ? undefined : role}\n    tabIndex={['span', 'div'].includes(Tag) ? tabIndex : undefined}\n    type={Tag === 'button' ? type : undefined}\n    ref={ref}\n    {...remainingProps}\n  >\n    <ButtonLabel>{children}</ButtonLabel>\n  </Tag>\n));\n\nButtonText.propTypes = {\n  /**\n   * Active\n   */\n  active: bool,\n\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Color scheme of button\n   */\n  colorScheme: oneOf([\n    'primary',\n    'secondary',\n    'tertiary'\n  ]),\n\n  /**\n   * Disabled\n   */\n  disabled: bool,\n\n  /**\n   * Flippable\n   */\n  flippable: bool,\n\n  /**\n   * Full width\n   */\n  isFullWidth: bool,\n\n  /**\n   * @ignore\n   */\n  role: string,\n\n  /**\n   * @ignore\n   */\n  tabIndex: oneOfType([number, string]),\n\n  /**\n   * Tag of button\n   */\n  tag: oneOf([\n    'a',\n    'button',\n    'div',\n    'span'\n  ]),\n\n  /**\n   * @ignore\n   */\n  type: string\n};\n\nButtonText.defaultProps = {\n  role: 'button',\n  tabIndex: 0,\n  tag: 'button',\n  type: 'button'\n};\n\nButtonText.displayName = 'ButtonText';\n\nexport default ButtonText;\n","import React, { forwardRef } from 'react';\nimport { bool, node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\nimport ButtonLabel from '../button-label';\n\nconst CSS_PREFIX = 'vds-btn-icon';\n\nconst ButtonIcon = forwardRef(({\n  ariaLabel,\n  children,\n  className,\n  disabled,\n  iconType,\n  type,\n  ...remainingProps\n}, ref) => (\n  <button\n    aria-label={ariaLabel}\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_PREFIX}--${iconType}`]: Boolean(iconType)\n    }, className)}\n    disabled={disabled}\n    ref={ref}\n    type={type}\n    {...remainingProps}\n  >\n    <ButtonLabel>{children}</ButtonLabel>\n  </button>\n));\n\nButtonIcon.propTypes = {\n  /**\n   * Button aria label\n   */\n  ariaLabel: string.isRequired,\n\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Disabled\n   */\n  disabled: bool,\n\n  /**\n   * Icon type\n   */\n  iconType: oneOf([\n    'dark',\n    'dark-outline',\n    'dark-tiny',\n    'light',\n    'light-fill',\n    'light-outline',\n    'light-tiny'\n  ]),\n\n  /**\n   * @ignore\n   */\n  type: string\n};\n\nButtonIcon.defaultProps = {\n  type: 'button'\n};\n\nButtonIcon.displayName = 'ButtonIcon';\n\nexport default ButtonIcon;\n","import React from 'react';\nimport { bool, func, node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input';\nconst CSS_STATE = 'vds-state';\n\nconst InputContainer = ({\n  children,\n  className,\n  css,\n  disabled,\n  expanded,\n  filled,\n  focus,\n  invalid,\n  isTextarea,\n  readOnly,\n  ...remainingProps\n}) => (\n  <div\n    className={classnames({\n      [`${CSS_PREFIX}`]: !isTextarea,\n      [`${CSS_PREFIX}-textarea-container`]: Boolean(isTextarea),\n      [`${CSS_STATE}--disabled`]: Boolean(disabled),\n      [`${CSS_STATE}--error`]: Boolean(invalid),\n      [`${CSS_STATE}--expanded`]: Boolean(expanded),\n      [`${CSS_STATE}--filled`]: Boolean(filled),\n      [`${CSS_STATE}--focus`]: Boolean(focus),\n      [`${CSS_STATE}--readonly`]: Boolean(readOnly),\n      [`${CSS_STATE}--success`]: typeof invalid === 'boolean' && !invalid\n    }, className)}\n    css={css}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nInputContainer.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * @ignore\n   */\n  css: func,\n\n  /**\n   * Disabled\n   */\n  disabled: bool,\n\n  /**\n   * Expanded\n   */\n  expanded: bool,\n\n  /**\n   * Filled\n   */\n  filled: bool,\n\n  /**\n   * Focus\n   */\n  focus: bool,\n\n  /**\n   * Invalid\n   */\n  invalid: bool,\n\n  /**\n   * isTextarea\n   */\n  isTextarea: bool,\n\n  /**\n   * ReadOnly\n   */\n  readOnly: bool\n};\n\nInputContainer.displayName = 'InputContainer';\n\nexport default InputContainer;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-label';\n\nconst InputLabel = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <label\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </label>\n));\n\nInputLabel.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputLabel.displayName = 'InputLabel';\n\nexport default InputLabel;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-bar';\n\nconst InputBar = ({ children, className, ...remainingProps }) => (\n  <div\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nInputBar.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputBar.displayName = 'InputBar';\n\nexport default InputBar;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-option';\n\nconst InputOption = ({ children, className, ...remainingProps }) => (\n  <span\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </span>\n);\n\nInputOption.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputOption.displayName = 'InputOption';\n\nexport default InputOption;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-hint';\n\nconst InputHint = ({ children, className, ...remainingProps }) => (\n  <span\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </span>\n);\n\nInputHint.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputHint.displayName = 'InputHint';\n\nexport default InputHint;\n","import React, { forwardRef } from 'react';\nimport { string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input--input-text';\n\nconst InputText = forwardRef(({ className, type, ...remainingProps }, ref) => (\n  <input\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    type={type}\n    {...remainingProps}\n  />\n));\n\nInputText.propTypes = {\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Type of the input element. It should be a valid HTML5 input type.\n   */\n  type: string\n};\n\nInputText.defaultProps = {\n  type: 'text'\n};\n\nInputText.displayName = 'InputText';\n\nexport default InputText;\n","import React from 'react';\nimport { bool, node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-message';\nconst CSS_STATE = 'vds-state';\n\nconst InputMessage = ({\n  // ariaAtomic,\n  children,\n  className,\n  invalid,\n  // role,\n  show,\n  ...remainingProps\n}) => (\n  <span\n    // aria-atomic={ariaAtomic}\n    // aria-live=\"polite\" //''invalid ? 'assertive' : 'polite'}\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_STATE}--hidden`]: !show,\n      [`${CSS_STATE}--error`]: Boolean(invalid)\n    }, className)}\n    // role={role}\n    {...remainingProps}\n  >\n    {children}\n  </span>\n);\n\nInputMessage.propTypes = {\n  /**\n   * Aria Atomic\n   */\n  ariaAtomic: oneOf(['true', 'false']),\n\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Invalid\n   */\n  invalid: bool,\n\n  /**\n   * Role\n   */\n  role: string,\n\n  /**\n   * Show\n   */\n  show: bool\n};\n\n// InputMessage.defaultProps = {\n//   ariaAtomic: 'true',\n//   role: 'alert'\n// };\n\nInputMessage.displayName = 'InputMessage';\n\nexport default InputMessage;\n","import React, { forwardRef, Fragment, useEffect, useRef, useState } from 'react';\nimport { bool, func, node, number, object, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\nimport shortid from 'shortid';\nimport InputContainer from '../input-container';\nimport InputLabel from '../input-label';\nimport InputBar from '../input-bar';\nimport InputHint from '../input-hint';\nimport InputInput from '../input-input';\nimport InputText from '../input-text';\nimport InputMessage from '../input-message';\nimport InputOption from '../input-option';\nimport Icon from '../icon';\nimport ScreenReader from '../screen-reader';\n\nconst CSS_STATE = 'vds-state';\n\nconst Input = forwardRef(({\n  ariaLabel,\n  checkmarkIcon,\n  children,\n  className,\n  containerProps,\n  css,\n  disabled,\n  errorIcon,\n  errorText,\n  expanded,\n  helpIcon,\n  helpText,\n  id = shortid.generate(),\n  invalid,\n  label,\n  labelId,\n  noValidate,\n  onBlur,\n  onChange,\n  onFocus,\n  placeholder,\n  readOnly,\n  showCheckmark,\n  showErrorText,\n  showHelpText,\n  useNativePlaceholder,\n  ...remainingProps\n}, ref) => {\n  const [dirty, setDirty] = useState(false);\n  const [filled, setFilled] = useState(Boolean(remainingProps.value) || Boolean(remainingProps.defaultValue));\n  const [focused, setFocused] = useState(false);\n  const [isInvalid, setIsInvalid] = useState(invalid);\n  const uniqueId = useRef(id);\n  const uid = uniqueId.current;\n\n  const setValidity = e => {\n    if (!noValidate) {\n      if (dirty) {\n        setIsInvalid((!e.target.checkValidity() || (e.target.required && !e.target.value.trim().length)));\n      }\n\n      if (!dirty && (e.target.required && !e.target.value.trim().length)) {\n        setIsInvalid(true);\n      }\n\n      if (dirty && !e.target.required && !e.target.value.trim().length) {\n        setIsInvalid(undefined);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setFilled(Boolean(remainingProps.defaultValue) || Boolean(remainingProps.value));\n  }, [remainingProps.defaultValue, remainingProps.value]);\n\n  useEffect(() => {\n    setIsInvalid(invalid);\n  }, [invalid]);\n\n  const handleBlur = e => {\n    setFocused(false);\n    setValidity(e);\n\n    if (typeof onBlur === 'function') {\n      onBlur(e);\n    }\n  };\n\n  const handleChange = e => {\n    setFilled(e.target.value !== '');\n\n    if (typeof isInvalid === 'boolean') {\n      setValidity(e);\n    }\n\n    setDirty(true);\n    if (typeof onChange === 'function') {\n      onChange(e);\n    }\n  };\n\n  const handleFocus = e => {\n    setFocused(true);\n\n    if (typeof onFocus === 'function') {\n      onFocus(e);\n    }\n  };\n\n  // NOTE: I'd actually separate out getting help text from error text\n  const getHelpOrErrorText = () => {\n    let helpOrErrorText = null;\n    if (showHelpText || showErrorText) {\n      helpOrErrorText = (\n        <InputMessage\n          id={`input-message-${uid}`}\n          show={(showHelpText && Boolean(helpText)) || (showErrorText && Boolean(errorText))}\n          invalid={isInvalid}\n        >\n          {\n            !isInvalid && focused && showHelpText && Boolean(helpText)\n              ? <Fragment>{helpIcon} {helpText}</Fragment>\n              : undefined\n          }\n          {\n            isInvalid === true && showErrorText && Boolean(errorText)\n              ? <Fragment>{errorIcon} <ScreenReader>Error</ScreenReader> {errorText}</Fragment>\n              : undefined\n          }\n        </InputMessage>\n      );\n    }\n    return helpOrErrorText;\n  };\n\n  return (\n    <InputContainer\n      className={classnames(className)}\n      css={css}\n      disabled={disabled}\n      expanded={expanded}\n      filled={filled}\n      focus={focused}\n      readOnly={readOnly}\n      invalid={isInvalid}\n      {...containerProps}\n    >\n      {label ? <InputLabel id={labelId} htmlFor={uid}>{label}</InputLabel> : undefined}\n      <InputBar>\n        <InputInput>\n          { placeholder && !useNativePlaceholder ? <InputHint>{placeholder}</InputHint> : undefined}\n          <InputText\n            aria-describedby={\n              showErrorText || showHelpText\n                ? `input-message-${uid}`\n                : undefined\n            }\n            aria-label={label ? undefined : ariaLabel}\n            aria-invalid={isInvalid}\n            id={uid}\n            disabled={disabled}\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            placeholder={useNativePlaceholder ? placeholder : undefined}\n            readOnly={readOnly}\n            ref={ref}\n            {...remainingProps}\n          />\n        </InputInput>\n        {\n          showCheckmark && typeof isInvalid === 'boolean' && !isInvalid && Boolean(checkmarkIcon)\n            ? <InputOption\n              className={classnames({\n                [`${CSS_STATE}--hidden`]: typeof isInvalid === 'boolean' && isInvalid\n              })}\n            >\n              {checkmarkIcon}\n            </InputOption>\n            : undefined\n        }\n        {children}\n      </InputBar>\n      {getHelpOrErrorText()}\n\n    </InputContainer>\n  );\n});\n\nInput.propTypes = {\n  /**\n   * Aria Label\n   */\n  ariaLabel: string,\n\n  /**\n   *  Checkmark Icon\n   */\n  checkmarkIcon: node,\n\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Container Props\n   */\n  containerProps: object, // eslint-disable-line\n\n  /**\n   * @ignore\n   */\n  css: func,\n\n  /**\n   * Disabled\n   */\n  disabled: bool,\n\n  /**\n   *  Error Message Icon\n   */\n  errorIcon: node,\n\n  /**\n   *  Error Message\n   */\n  errorText: node,\n\n  /**\n   *  Expanded\n   */\n  expanded: bool,\n\n  /**\n   * Input Help Message Icon\n   */\n  helpIcon: node,\n\n  /**\n   * Input Help Message\n   */\n  helpText: node,\n\n  /**\n   * ID\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   * Invalid\n   */\n  invalid: bool,\n\n  /**\n   * Label\n   */\n  label: node,\n\n  /**\n   * Label Id\n   */\n  labelId: oneOfType([number, string]),\n\n  /**\n   * Disable native HTML5 validation e.g. type=email, pattern=\"some regex pattern\"\n   */\n  noValidate: bool,\n\n  /**\n   * Callback fired when the input element loses focus.\n   */\n  onBlur: func,\n\n  /**\n   * On Change\n   */\n  onChange: func,\n\n  /**\n   * Callback fired when the input element is focused on.\n   */\n  onFocus: func,\n\n  /**\n   * Placeholder\n   */\n  placeholder: node,\n\n  /**\n   * ReadOnly\n   */\n  readOnly: bool,\n\n  /**\n   * Show Checkmark Icon\n   */\n  showCheckmark: bool,\n\n  /**\n   * Show Error Message\n   */\n  showErrorText: bool,\n\n  /**\n   * Show Help Message\n   */\n  showHelpText: bool,\n\n  /**\n   * Use native placeholder\n   */\n  useNativePlaceholder: bool\n};\n\nInput.defaultProps = {\n  checkmarkIcon: <Icon name=\"checkmark\" resolution=\"low\" />,\n  errorIcon: <Icon name=\"error\" resolution=\"low\" />\n};\n\nInput.displayName = 'Input';\n\nexport default Input;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-input-input';\n\nconst InputInput = ({ children, className, ...remainingProps }) => (\n  <div\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nInputInput.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nInputInput.displayName = 'InputInput';\n\nexport default InputInput;\n","import React, { cloneElement, Fragment, useRef } from 'react';\nimport { node, number, oneOf, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\nimport shortid from 'shortid';\nimport TooltipTrigger from 'react-popper-tooltip';\n\nconst CSS_PREFIX = 'vds-tooltip';\nconst CSS_STATE = 'vds-state';\n\nconst Tooltip = ({ className, tooltip, children, id = shortid.generate(), trigger, ...remainingProps }) => {\n  const uniqueId = useRef(id);\n  const uid = uniqueId.current;\n\n  return (\n    <TooltipTrigger\n      trigger={trigger}\n      {...remainingProps}\n      modifiers={{\n        offset: {\n          enabled: true,\n          offset: '0, 4px'\n        }\n      }}\n      tooltip={({ getTooltipProps, tooltipRef }) => (\n        <div\n          {...getTooltipProps({\n            className: classnames(CSS_PREFIX, `${CSS_STATE}--show`, className),\n            ref: tooltipRef\n          })}\n        >\n          <div className={`${CSS_PREFIX}-content`}>\n            <span className={`${CSS_PREFIX}-text`}>{tooltip}</span>\n            <span className={`${CSS_PREFIX}-pointer`} />\n          </div>\n        </div>\n      )}\n    >\n      {({ getTriggerProps, triggerRef }) => (\n        <Fragment>\n          {cloneElement(children, {\n            ...getTriggerProps({\n              'aria-controls': uid,\n              'aria-describedby': uid,\n              ref: triggerRef\n            })\n          })}\n          <span aria-hidden=\"true\" id={uid} style={{ display: 'none' }}>\n            {tooltip}\n          </span>\n        </Fragment>\n      )}\n    </TooltipTrigger>\n  );\n};\nTooltip.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * ID\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   * Popper Placement\n   */\n  placement: oneOf([\n    'auto',\n    'bottom-end',\n    'bottom-start',\n    'bottom',\n    'left-end',\n    'left-start',\n    'left',\n    'right-end',\n    'right-start',\n    'right',\n    'top-end',\n    'top-start',\n    'top'\n  ]),\n\n  /**\n   * Tooltip\n   */\n  tooltip: node.isRequired,\n\n  /**\n   * Trigger\n   */\n  trigger: oneOf([\n    'click',\n    'hover',\n    'right-click',\n    'none'\n  ])\n};\n\nTooltip.displayName = 'Tooltip';\n\nexport default Tooltip;\n","import React, { forwardRef } from 'react';\nimport { bool, node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-search';\n\nconst Search = forwardRef(({\n  children,\n  className,\n  container,\n  dynamic,\n  expandable,\n  navbar,\n  ...remainingProps\n}, ref) => (\n  <div\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_PREFIX}--container`]: Boolean(container),\n      [`${CSS_PREFIX}--dynamic`]: Boolean(dynamic),\n      [`${CSS_PREFIX}--expandable`]: Boolean(expandable),\n      [`${CSS_PREFIX}--nav-bar`]: Boolean(navbar)\n    }, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n));\n\nSearch.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Container Search bar\n   */\n  container: bool,\n\n  /**\n   * Dynamic Search bar\n   */\n  dynamic: bool,\n\n  /**\n   * Expandable Search bar\n   */\n  expandable: bool,\n\n  /**\n   * Navbar Search bar\n   */\n  navbar: bool\n};\n\nSearch.displayName = 'Search';\n\nexport default Search;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-search-clear-btn';\n\nconst SearchClearButton = ({ children, className, ...remainingProps }) => (\n  <div\n    className={classnames(CSS_PREFIX, className)}\n    style={{ display: 'block' }}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nSearchClearButton.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nSearchClearButton.displayName = 'SearchClearButton';\n\nexport default SearchClearButton;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-search-icon';\n\nconst SearchIcon = ({ children, className, ...remainingProps }) => (\n  <div\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </div>\n);\n\nSearchIcon.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nSearchIcon.displayName = 'SearchIcon';\n\nexport default SearchIcon;\n"],"sourceRoot":""}
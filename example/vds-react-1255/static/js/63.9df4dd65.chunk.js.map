{"version":3,"sources":["components/toggle-button-set/index.js","components/toggle-button-set-legend/index.js","components/toggle-button-list/index.js","components/toggle-button/index.js","components/toggle-button-list-stateless/index.js","components/toggle-button/example/index.js","pages/components/toggle-button.js","components/screen-reader/index.js","components/data-table/index.js","components/tbody/index.js","components/td/index.js","components/th/index.js","components/thead/index.js","components/tr/index.js"],"names":["ToggleButtonSet","children","className","remainingProps","classnames","displayName","ToggleButtonSetLegend","ToggleButtonList","id","shortid","generate","onChange","selectedIndex","useState","selected","setSelected","uid","useRef","current","useEffect","handleChange","e","itemIndex","Children","map","child","k","cloneElement","checked","ToggleButton","focused","label","name","onBlur","onClick","onFocus","value","focus","setFocus","event","type","stopPropagation","onKeyPress","Boolean","htmlFor","ToggleButtonListStateless","ToggleButtonExample","items","state","setState","item","target","tag","key","prettier","require","plugins","reactDocs","jsParsed","replace","exampleCode","componentProps","setComponentProps","parse","console","log","siblingOfStickyFooter","role","aria-label","undefined","exact","to","process","activeClassName","resolution","match","path","defaultProps","theme","code","language","style","tokens","getLineProps","getTokenProps","line","i","display","opacity","userSelect","width","token","format","ReactDOMServer","renderToStaticMarkup","css","parser","printWidth","dividerLines","size","aria-sort","scope","props","Object","entries","filter","doc","description","required","length","color","Array","isArray","v","join","defaultValue","ScreenReader","forwardRef","ref","Tag","propTypes","node","string","elementType","DataTable","customizableColumns","keyValuePairs","reveal","revealFirstColumn","revealLastColumn","rowSelection","stickyHeader","columns","arrayOf","shape","bool","data","oneOf","Tbody","Td","textAlign","Th","Thead","Tr"],"mappings":"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","file":"static/js/63.9df4dd65.chunk.js","sourcesContent":["import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-toggle-button-set';\n\nconst ToggleButtonSet = ({ children, className, ...remainingProps }) => (\n  <fieldset\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </fieldset>\n);\n\nToggleButtonSet.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nToggleButtonSet.displayName = 'ToggleButtonSet';\n\nexport default ToggleButtonSet;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-toggle-button-set-legend';\n\nconst ToggleButtonSetLegend = ({ children, className, ...remainingProps }) => (\n  <legend\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </legend>\n);\n\nToggleButtonSetLegend.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nToggleButtonSetLegend.displayName = 'ToggleButtonSetLegend';\n\nexport default ToggleButtonSetLegend;\n","import React, { Children, cloneElement, useEffect, useRef, useState } from 'react';\nimport { func, node, number, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\nimport shortid from 'shortid';\n\nconst CSS_PREFIX = 'vds-toggle-button-list';\n\nconst ToggleButtonList = ({\n  children,\n  className,\n  id = shortid.generate(),\n  onChange,\n  selectedIndex,\n  ...remainingProps\n}) => {\n  const [selected, setSelected] = useState(selectedIndex);\n  const uniqueId = useRef(id);\n  const uid = uniqueId.current;\n\n  useEffect(() => {\n    setSelected(selectedIndex);\n  }, [selectedIndex]);\n\n  const handleChange = (e, itemIndex) => {\n    setSelected(itemIndex);\n\n    if (typeof onChange === 'function') {\n      onChange(e, itemIndex);\n    }\n  };\n\n  return (\n    <ul\n      className={classnames(CSS_PREFIX, className)}\n      id={uid}\n      {...remainingProps}\n    >\n      {\n        Children.map(children, (child, k) => cloneElement(child, {\n          checked: k === selected,\n          id: `${uid}-${k}`,\n          onChange: e => handleChange(e, k)\n        }))\n      }\n    </ul>\n  );\n};\n\nToggleButtonList.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * ID for <ul />\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   * Callback fired when a ToggleButton input value changes.\n   */\n  onChange: func,\n\n  /**\n   * Index of list item to select, where 0 represents the first list item.\n   */\n  selectedIndex: number\n};\n\nToggleButtonList.displayName = 'ToggleButtonList';\n\nexport default ToggleButtonList;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { bool, func, number, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-toggle-button';\nconst CSS_STATE = 'vds-state';\n\nconst ToggleButton = ({\n  checked,\n  className,\n  focused,\n  id,\n  label,\n  name,\n  onBlur,\n  onClick,\n  onChange,\n  onFocus,\n  value,\n  ...remainingProps\n}) => {\n  const [focus, setFocus] = useState(focused);\n  const uniqueId = useRef(id);\n  const uid = uniqueId.current;\n\n  useEffect(() => {\n    setFocus(focused);\n  }, [focused]);\n\n  const handleFocus = event => {\n    setFocus(true);\n\n    if (typeof onFocus === 'function') {\n      onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    setFocus(false);\n\n    if (typeof onBlur === 'function') {\n      onBlur(event);\n    }\n  };\n  return (\n    <li\n      className={classnames(`${CSS_PREFIX}-item`, className)}\n    >\n      <input\n        checked={checked}\n        className={CSS_PREFIX}\n        id={uid}\n        name={name}\n        onBlur={handleBlur}\n        onChange={onChange}\n        onClick={onClick}\n        onFocus={handleFocus}\n        type=\"radio\"\n        value={value}\n        {...remainingProps}\n      />\n      <label\n        onClick={e => e.stopPropagation()}\n        onKeyPress={e => e.stopPropagation()}\n        className={classnames(`${CSS_PREFIX}-label`, {\n          [`${CSS_STATE}--selected`]: Boolean(checked),\n          [`${CSS_STATE}--focus`]: Boolean(focus)\n        })}\n        htmlFor={uid}\n      >\n        {label}\n      </label>\n    </li>\n  );\n};\n\nToggleButton.propTypes = {\n  /**\n   * A Boolean attribute which, if present, indicates that this\n   * radio button is the currently selected one in the group\n   */\n  checked: bool,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * If true, will put component in a \"focused\" state.\n   */\n  focused: bool,\n\n  /**\n   * Id for toggle button.\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   * Label for toggle button.\n   */\n  label: string,\n\n  /**\n   * Name for toggle button.\n   */\n  name: string.isRequired,\n\n  /**\n   * Callback fired when the input element loses focus.\n   */\n  onBlur: func,\n\n  /**\n   * Callback fired when the input value changes.\n   */\n  onChange: func,\n\n  /**\n   * Callback fired when the input is clicked.\n   */\n  onClick: func,\n\n  /**\n   * Callback fired when the input element is focused on.\n   */\n  onFocus: func,\n\n  /**\n   * The value attribute serves a special purpose for inputs of type radio:\n   * when a form is submitted, only radio buttons which are currently checked are\n   * submitted to the server, and the reported value is the value of\n   * the value attribute. If the value is not otherwise specified,\n   * it is the string \"on\" by default.\n   */\n  value: string.isRequired\n};\n\nToggleButton.displayName = 'ToggleButton';\n\nexport default ToggleButton;\n","import React from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-toggle-button-list';\n\nconst ToggleButtonListStateless = ({ children, className, ...remainingProps }) => (\n  <ul\n    className={classnames(CSS_PREFIX, className)}\n    {...remainingProps}\n  >\n    {children}\n  </ul>\n);\n\nToggleButtonListStateless.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nToggleButtonListStateless.displayName = 'ToggleButtonListStateless';\n\nexport default ToggleButtonListStateless;\n","import React, { useState } from 'react';\nimport Col from '../../col';\nimport Grid from '../../grid';\nimport Row from '../../row';\nimport Typography from '../../typography';\nimport ToggleButtonSet from '../../toggle-button-set';\nimport ToggleButtonSetLegend from '../../toggle-button-set-legend';\nimport ToggleButtonList from '../../toggle-button-list';\nimport ToggleButton from '../../toggle-button';\nimport ToggleButtonListStateless from '../../toggle-button-list-stateless';\n\nconst ToggleButtonExample = () => {\n  const [state, setState] = useState({\n    items: [\n      {\n        checked: false,\n        label: 'One',\n        value: 'one'\n      },\n      {\n        checked: true,\n        label: 'Two',\n        value: 'Two'\n      },\n      {\n        checked: false,\n        label: 'Three',\n        value: 'three'\n      },\n      {\n        checked: false,\n        label: 'Four',\n        value: 'four'\n      }\n    ]\n  });\n\n  const handleChange = e => setState({\n    items: [...state.items.map(item => ({ ...item, checked: item.value === e.target.value }))]\n  });\n\n  return (\n    <Grid>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Toggle Button</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ToggleButtonSet>\n            <ToggleButtonSetLegend>Select a button</ToggleButtonSetLegend>\n            <ToggleButtonList>\n              <ToggleButton\n                name=\"toggle-button-test-1\"\n                id=\"toggle-button-test-11\"\n                label=\"One\"\n                value=\"test\"\n              />\n              <ToggleButton\n                name=\"toggle-button-test-1\"\n                id=\"toggle-button-test-22\"\n                label=\"Two\"\n                value=\"test2\"\n              />\n              <ToggleButton\n                name=\"toggle-button-test-1\"\n                id=\"toggle-button-test-33\"\n                label=\"Three\"\n                value=\"test3\"\n              />\n            </ToggleButtonList>\n          </ToggleButtonSet>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Toggle Button Pre-Selected</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ToggleButtonSet>\n            <ToggleButtonSetLegend>Select a button</ToggleButtonSetLegend>\n            <ToggleButtonList selectedIndex={2}>\n              <ToggleButton\n                name=\"toggle-button-test-2\"\n                id=\"toggle-button-test-14\"\n                label=\"One\"\n                value=\"test\"\n              />\n              <ToggleButton\n                name=\"toggle-button-test-2\"\n                id=\"toggle-button-test-25\"\n                label=\"Two\"\n                value=\"test2\"\n              />\n              <ToggleButton\n                name=\"toggle-button-test-2\"\n                id=\"toggle-button-test-36\"\n                label=\"Three\"\n                value=\"test3\"\n              />\n            </ToggleButtonList>\n          </ToggleButtonSet>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag=\"h2\">Toggle Button Stateless (BYO-State)</Typography>\n          <Typography>See &quot;VIEW CODE&quot; below</Typography>\n          <Typography>Use this approach to create your own wrapper to match the shape of your data and how and where the data should be manipulated</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ToggleButtonSet>\n            <ToggleButtonSetLegend>Select a button</ToggleButtonSetLegend>\n            <ToggleButtonListStateless>\n              {\n                state.items.map((item, k) => (\n                  <ToggleButton\n                    key={k}\n                    checked={item.checked}\n                    id={`toggle-button-${k}`}\n                    label={item.label}\n                    name=\"toggle-stateless\"\n                    onChange={handleChange}\n                    value={item.value}\n                  />\n                ))\n              }\n            </ToggleButtonListStateless>\n          </ToggleButtonSet>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nexport default ToggleButtonExample;\n","/* This file is autogenerated  DO NOT EDIT */\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport classnames from 'classnames';\nimport raw from \"raw.macro\";\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport theme from 'prism-react-renderer/themes/github';\nimport { NavLink } from 'react-router-dom';\n\nimport Col from '../../components/col';\nimport DataTable from '../../components/data-table';\nimport Icon from '../../components/icon';\nimport Grid from '../../components/grid';\nimport Row from '../../components/row';\nimport ScreenReader from '../../components/screen-reader';\nimport Tab from '../../components/tab';\nimport TabList from '../../components/tab-list';\nimport Tbody from '../../components/tbody';\nimport Td from '../../components/td';\nimport Th from '../../components/th';\nimport Thead from '../../components/thead';\nimport Tr from '../../components/tr';\nimport Typography from '../../components/typography';\n\nimport Example from '../../components/toggle-button/example';\n\nconst prettier = require(\"prettier/standalone\");\nconst plugins = [require(\"prettier/parser-html\")];\nconst reactDocs = require('react-docgen');\nconst js = raw('../../components/toggle-button/index.js');\nconst jsParsed = js.replace('= memo(({', '= React.forwardRef(({').replace('cloneElement(', 'React.cloneElement('); // see https://github.com/reactjs/react-docgen/issues/342\nconst exampleCodeRaw = raw('../../components/toggle-button/example/index.js');\nconst exampleCode = exampleCodeRaw.replace(/'..\\/..\\//g, `'@visa/vds-react/`);\n\nconst ToggleButtonExample = ({ ...remainingProps }) => {\n  const [componentProps, setComponentProps] = useState({});\n\n  useEffect(() => {\n    try {\n      setComponentProps(reactDocs.parse(jsParsed));\n    } catch {\n      // eslint-disable-next-line\n      console.log(`\n        React-docgen could not parse props for ToggleButton\n        check for fix here https://github.com/reactjs/react-docgen/issues/342`);\n    }\n  }, []);\n\n  return (\n    <Grid siblingOfStickyFooter>\n      <Row>\n        <Col>\n          <Typography tag=\"h1\">Toggle Button</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col role=\"navigation\" aria-label=\"Secondary\">\n          <TabList role=\"none\">\n            <Tab role={undefined} tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/toggle-button`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"log\" resolution=\"low\" />Toggle Button Example\n            </Tab>\n            <Tab role={undefined} tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/toggle-button/code`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />JSX of Example\n            </Tab>\n            <Tab role={undefined} tag={<NavLink exact to={`${process.env.PUBLIC_URL}/components/toggle-button/html`} activeClassName=\"vds-state--selected\" />}>\n              <Icon name=\"code-fork-code-alt\" resolution=\"low\" />HTML of Example\n            </Tab>\n          </TabList>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/toggle-button`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/toggle-button`\n            })}\n          >\n            <Example {...remainingProps} />\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/toggle-button/code`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/toggle-button/code`\n            })}\n          >\n            <Highlight {...defaultProps} theme={theme} code={exampleCode} language=\"jsx\">\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })} key={i}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} key={key} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n          <div\n            className={classnames({\n              'vds-state--hidden': remainingProps.match.path !== `${process.env.PUBLIC_URL}/components/toggle-button/html`,\n              'vds-state--show': remainingProps.match.path === `${process.env.PUBLIC_URL}/components/toggle-button/html`\n            })}\n          >\n            <Highlight\n              {...defaultProps}\n              theme={theme}\n              code={prettier.format(ReactDOMServer.renderToStaticMarkup(<Example {...remainingProps} />), { css: 'ignore', parser: 'html', plugins, printWidth: 120 })}\n              language=\"html\"\n            >\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                  {tokens.map((line, i) => (\n                    <div {...getLineProps({ key: i, line })} key={i}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          opacity: '0.3',\n                          userSelect: 'none',\n                          width: '2em'\n                        }}\n                      >\n                        {i + 1}\n                      </span>\n                      {line.map((token, key) => <span {...getTokenProps({ key, token })} key={key} />)}\n                    </div>\n                  ))}\n                </pre>\n              )}\n            </Highlight>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <DataTable\n            className={classnames([\n              'components'\n            ])}\n            dividerLines\n            size=\"compact\"\n          >\n            <ScreenReader tag=\"caption\">Props</ScreenReader>\n            <Thead>\n              <Tr className=\"vds-tr\">\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Prop\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Type\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Default\n                </Th>\n                <Th aria-sort=\"none\" role=\"columnheader\" scope=\"col\">\n                  Description\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {\n                componentProps.props && Object.entries(componentProps.props)\n                  .filter(doc => doc[1].description !== '@ignore')\n                  .map((doc, i) => (\n                    <Tr className=\"vds-tr\" key={i}>\n                      <Th className=\"vds-td\" scope=\"row\">\n                        {doc[0]} {doc[1].required ? <strong> - required</strong> : ''}\n                      </Th>\n                      <Td className=\"vds-td\">\n                        <strong>{doc[1].type.name}</strong>\n                        {\n                          doc[1].type.value && doc[1].type.value.length\n                            ? <small style={{ color: '#1a1f71' }}><br />\n                              {\n                                Array.isArray(doc[1].type.value)\n                                  ? doc[1].type.value.map(v => v.value || v.name).join(', ')\n                                  : typeof doc[1].type.value === 'string'\n                                    ? doc[1].type.value\n                                    : undefined\n                              }\n                            </small>\n                            : ''\n                        }\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].defaultValue ? doc[1].defaultValue.value : ''}\n                      </Td>\n                      <Td className=\"vds-td\">\n                        {doc[1].description}\n                      </Td>\n                    </Tr>\n                  ))\n              }\n            </Tbody>\n          </DataTable>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nToggleButtonExample.displayName = 'ToggleButtonExample';\n\nexport default ToggleButtonExample;\n","import React, { forwardRef } from 'react';\nimport { elementType, node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-screen-reader';\n\nconst ScreenReader = forwardRef(({ children, className, tag: Tag, ...remainingProps }, ref) => (\n  <Tag\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </Tag>\n));\n\nScreenReader.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n  * Tag\n  */\n  tag: elementType\n};\n\nScreenReader.defaultProps = {\n  tag: 'span'\n};\n\nScreenReader.displayName = 'ScreenReader';\n\nexport default ScreenReader;\n","import React, { forwardRef } from 'react';\nimport { arrayOf, bool, node, oneOf, shape, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-data-table';\nconst CSS_STATE = 'vds-state';\n\nconst DataTable = forwardRef(({\n  children,\n  className,\n  customizableColumns,\n  dividerLines,\n  keyValuePairs,\n  reveal,\n  revealFirstColumn,\n  revealLastColumn,\n  rowSelection,\n  size,\n  stickyHeader,\n  ...remainingProps\n}, ref) => (\n  <table\n    {...remainingProps}\n    className={classnames(CSS_PREFIX, {\n      [`${CSS_STATE}--customizable-columns`]: Boolean(customizableColumns),\n      [`${CSS_STATE}--divider-lines`]: Boolean(dividerLines),\n      [`${CSS_STATE}--key-value-pairs`]: Boolean(keyValuePairs),\n      [`${CSS_STATE}--${size}`]: Boolean(size),\n      [`${CSS_STATE}--reveal`]: Boolean(reveal),\n      [`${CSS_STATE}--reveal-first-column`]: Boolean(revealFirstColumn),\n      [`${CSS_STATE}--reveal-last-column`]: Boolean(revealLastColumn),\n      [`${CSS_STATE}--${rowSelection}`]: Boolean(rowSelection),\n      [`${CSS_STATE}--sticky-header`]: Boolean(stickyHeader)\n    }, className)}\n    ref={ref}\n  >\n    {children}\n  </table>\n));\n\nDataTable.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Columns\n   */\n  columns: arrayOf(shape({})),\n\n  /**\n   * Customizable columns\n   */\n  customizableColumns: bool,\n\n  /**\n   * Data\n   */\n  data: arrayOf(shape({})),\n\n  /**\n   * Divider lines\n   */\n  dividerLines: bool,\n\n  /**\n   * Key value pairs\n   */\n  keyValuePairs: bool,\n\n  /**\n   * Reveal\n   */\n  reveal: bool,\n\n  /**\n   * Reveal first column\n   */\n  revealFirstColumn: bool,\n\n  /**\n   * Reveal last column\n   */\n  revealLastColumn: bool,\n\n  /**\n   * Row Selection\n   */\n  rowSelection: oneOf(['multi-select', 'single-select']),\n\n  /**\n   * Size\n   */\n  size: oneOf(['compact']),\n\n  /**\n   * Sticky Header\n   */\n  stickyHeader: bool\n};\n\nDataTable.displayName = 'DataTable';\n\nexport default DataTable;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tbody';\n\nconst Tbody = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tbody\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tbody>\n));\n\nTbody.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTbody.displayName = 'Tbody';\n\nexport default Tbody;\n","import React, { forwardRef } from 'react';\nimport { node, oneOf, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-td';\n\nconst Td = forwardRef(({\n  children,\n  className,\n  textAlign,\n  ...remainingProps\n}, ref) => (\n  <td\n    className={classnames(CSS_PREFIX, {\n      [`vds-text--${textAlign}`]: Boolean(textAlign)\n    }, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </td>\n));\n\nTd.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n  /**\n   * Text alignment at all sizes\n   */\n  textAlign: oneOf(['center', 'left', 'right'])\n};\n\nTd.displayName = 'Td';\n\nexport default Td;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-th';\n\nconst Th = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <th\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </th>\n));\n\nTh.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTh.displayName = 'Th';\n\nexport default Th;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-thead';\n\nconst Thead = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <thead\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </thead>\n));\n\nThead.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nThead.displayName = 'Thead';\n\nexport default Thead;\n","import React, { forwardRef } from 'react';\nimport { node, string } from 'prop-types';\nimport classnames from 'classnames';\n\nconst CSS_PREFIX = 'vds-tr';\n\nconst Tr = forwardRef(({ children, className, ...remainingProps }, ref) => (\n  <tr\n    className={classnames(CSS_PREFIX, className)}\n    ref={ref}\n    {...remainingProps}\n  >\n    {children}\n  </tr>\n));\n\nTr.propTypes = {\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string\n};\n\nTr.displayName = 'Tr';\n\nexport default Tr;\n"],"sourceRoot":""}
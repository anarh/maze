(this["webpackJsonp@visa/vds-react"]=this["webpackJsonp@visa/vds-react"]||[]).push([[69],{303:function(e,n,a){"use strict";a.r(n);var t=a(64),r=a(0),l=a.n(r),o=a(542),i=a.n(o),d=a(2),c=a.n(d),s=a(549),u=a(548),p=a(39),m=a(8),v=a(536),h=a(18),f=a(23),g=a(16),y=a(535),E=a(65),S=a(145),w=a(537),b=a(538),T=a(539),C=a(540),x=a(541),O=a(7),D=a(13),I=a(108),R=a(109),M=a(110),V=a(557),P=a(580),B=a(752),_=a(1058),k=a(967),F=function(){var e=Object(r.useState)({touched:!1,valid:!1,validated:!1,value:""}),n=Object(t.a)(e,2),a=n[0],o=n[1],i=Object(r.useRef)(),d=Object(r.useState)({day:"",errorText:"Error: Please provide a valid Date of Birth",month:"",showError:!1,touched:!1,valid:!1,validDay:!1,validMonth:!1,validYear:!1,validated:!1,validatedDay:!1,validatedMonth:!1,validatedYear:!1,year:""}),c=Object(t.a)(d,2),s=c[0],u=c[1],p=Object(r.useRef)(),v=Object(r.useRef)(),E=Object(r.useRef)(),S=function(){var e=String(p.current.value),n=v.current.value,a=String(E.current.value),t=e.length>0,r=n.length>0,l=a.length>0;u(Object(D.a)({},s,{day:e,month:n,touched:!0,validDay:t,validMonth:r,validYear:l,validated:!1,year:a}))};return l.a.createElement(f.a,null,l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(O.a,{tag:"h2"},"Select"))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(I.a,{position:"relative",alertType:"information"},l.a.createElement(f.a,null,l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(R.a,null,l.a.createElement(h.a,{name:"info",resolution:"low"})),l.a.createElement(M.a,null,"Select takes all native React props directly, (e.g. onChange, etc)"))))))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(B.a,{label:"Card Type",defaultValue:""},l.a.createElement("option",{value:"",disabled:!0,hidden:!0}),l.a.createElement("option",{value:"silver_card"},"Silver Signature Card"),l.a.createElement("option",{value:"signature_card"},"Visa Signature Card"),l.a.createElement("option",{value:"platinum_card"},"Platinum Visa Card"),l.a.createElement("option",{value:"premium_card"},"Premium Card With An Unnecessarily Long Description")))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(O.a,{tag:"h3"},"Select (ReadOnly)"),l.a.createElement(B.a,{label:"Select Card",readOnly:!0,value:"Visa Signature Card"},l.a.createElement("option",{value:"",disabled:!0,hidden:!0}),l.a.createElement("option",{value:"silver_card"},"Silver Signature Card"),l.a.createElement("option",{value:"signature_card"},"Visa Signature Card"),l.a.createElement("option",{value:"platinum_card"},"Platinum Visa Card"),l.a.createElement("option",{value:"premium_card"},"Premium Card With An Unnecessarily Long Description")))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(O.a,{tag:"h3"},"Select (Disabled)"),l.a.createElement(B.a,{disabled:!0,label:"Select Card",value:"signature_card"},l.a.createElement("option",{value:"",disabled:!0}),l.a.createElement("option",{value:"silver_card"},"Silver Signature Card"),l.a.createElement("option",{value:"signature_card"},"Visa Signature Card"),l.a.createElement("option",{value:"platinum_card"},"Platinum Visa Card"),l.a.createElement("option",{value:"premium_card"},"Premium Card With An Unnecessarily Long Description")))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(O.a,{tag:"h3"},"Select with preselection"),l.a.createElement(B.a,{label:"Card Type",defaultValue:"signature_card"},l.a.createElement("option",{value:"silver_card"},"Silver Signature Card"),l.a.createElement("option",{value:"signature_card"},"Visa Signature Card"),l.a.createElement("option",{value:"platinum_card"},"Platinum Visa Card"),l.a.createElement("option",{value:"premium_card"},"Premium Card With An Unnecessarily Long Description")))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(O.a,{tag:"h3"},"Select with validation"),l.a.createElement(O.a,{variant:"caption"},"*=required"))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(B.a,{errorText:"Error: A card type is required",helpText:a.valid?"Successfully selected card type":a.touched?"":"Please select a card type",invalid:a.validated&&!a.valid,label:"Card Type *",onChange:function(e){o(Object(D.a)({},a,{touched:!0,validated:!1,value:e.target.value}))},ref:i,required:!0,showErrorText:!a.valid,showHelpText:Boolean(!a.validated||a.valid),value:a.value},l.a.createElement("option",{value:"",disabled:!0,hidden:!0}),l.a.createElement("option",{value:"silver_card"},"Silver Signature Card"),l.a.createElement("option",{value:"signature_card"},"Visa Signature Card"),l.a.createElement("option",{value:"platinum_card"},"Platinum Visa Card"),l.a.createElement("option",{value:"premium_card"},"Premium Card With An Unnecessarily Long Description")))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(P.a,null,l.a.createElement(V.a,{colorScheme:"secondary",onClick:function(){o({touched:!1,valid:!1,validated:!1,value:""}),i.current.focus()}},"Reset"),l.a.createElement(V.a,{onClick:function(){var e=a.value&&a.value.length>0;o(Object(D.a)({},a,{touched:!1,valid:e,validated:!0})),e||i.current.focus()}},"Validate")))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(O.a,{tag:"h2"},"Select Group with validity states"),l.a.createElement(O.a,{variant:"caption"},"*=required"),l.a.createElement(_.a,{errorText:s.showError?s.errorText:"",helpText:s.valid?"Successfully selected date of birth":s.touched?"":"Please fill out your Date of Birth info field",invalid:!s.valid&&s.validated||!s.validMonth||!s.validDay||!s.validYear,legend:"Date of Birth",showErrorText:s.showError,showHelpText:Boolean(!s.validated||s.valid)},l.a.createElement(y.a,{id:"select-group-invalid-month"},s.validated&&!s.validMonth?l.a.createElement(r.Fragment,null,"Error: Please select a valid month"):null),l.a.createElement(B.a,{"aria-describedby":"select-group-invalid-month",invalid:!s.validMonth&&s.validatedMonth,label:"Month *",onChange:function(){u(Object(D.a)({},s,{validatedMonth:!0})),S()},ref:v,required:!0,showErrorText:!1,value:s.month},l.a.createElement("option",{value:"",disabled:!0,hidden:!0}),["January","February","March","April","May","June","July","August","September","October","November","December"].map((function(e,n){return l.a.createElement("option",{key:n,value:e.substring(0,3).toLowerCase()},e)}))),l.a.createElement(k.a,null," / "),l.a.createElement(y.a,{id:"select-group-invalid-day"},s.validated&&!s.validDay?l.a.createElement(r.Fragment,null,"Error: Please select a valid day"):null),l.a.createElement(B.a,{"aria-describedby":"select-group-invalid-day",invalid:!s.validDay&&s.validatedDay,label:"Day *",onChange:function(){u(Object(D.a)({},s,{validatedDay:!0})),S()},ref:p,required:!0,showErrorText:!1,value:s.day},l.a.createElement("option",{value:"",disabled:!0,hidden:!0}),Array.from(new Array(31),(function(e,n){return n+1})).map((function(e,n){return l.a.createElement("option",{key:n,value:e},e)}))),l.a.createElement(k.a,null," / "),l.a.createElement(y.a,{id:"select-group-invalid-year"},s.validated&&!s.validYear?l.a.createElement(r.Fragment,null,"Error: Please select a valid year"):null),l.a.createElement(B.a,{"aria-describedby":"select-group-invalid-year",invalid:!s.validYear&&s.validatedYear,label:"Year *",onChange:function(){u(Object(D.a)({},s,{validatedYear:!0})),S()},ref:E,required:!0,showErrorText:!1,value:s.year},l.a.createElement("option",{value:"",disabled:!0,hidden:!0}),Array.from(new Array((new Date).getFullYear()-1900),(function(e,n){return n+1900})).map((function(e,n){return l.a.createElement("option",{key:n,value:e},e)})))))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(P.a,null,l.a.createElement(V.a,{colorScheme:"secondary",onClick:function(){u({day:"",errorText:"Error: Please provide a valid Date of Birth",month:"",showError:!1,touched:!1,valid:!1,validDay:!1,validMonth:!1,validYear:!1,validated:!1,validatedDay:!1,validatedMonth:!1,validatedYear:!1,year:""}),v.current.focus()}},"Reset"),l.a.createElement(V.a,{onClick:function(){var e,n=s.validDay&&s.validMonth&&s.validYear,a=!s.validDay||!s.validMonth||!s.validYear,t="Error: Please provide a valid ",r=0;["month","day","year"].map((function(e,n){s["valid"+e.substring(0,1).toUpperCase()+e.substring(1)]||(t+=e+", ",r+=1)})),e=t.lastIndexOf(", "),e=(t=t.substring(0,e)).lastIndexOf(", "),2===r?t=t.replace(", "," and "):3===r&&(t=t.substring(0,e+1)+" and "+t.substring(e+1)),u(Object(D.a)({},s,{errorText:t,showError:a,touched:!1,valid:n,validated:!0,validatedDay:!0,validatedMonth:!0,validatedYear:!0})),s.valid||(s.validMonth?s.validDay?s.validYear||E.current.focus():p.current.focus():v.current.focus())}},"Validate")))))},A=a(545),Y=[a(546)],j=a(547),N="import React, { forwardRef, Fragment, useEffect, useRef, useState } from 'react';\nimport { bool, func, node, number, oneOfType, string } from 'prop-types';\nimport classnames from 'classnames';\nimport shortid from 'shortid';\nimport InputContainer from '../input-container';\nimport InputLabel from '../input-label';\nimport InputBar from '../input-bar';\nimport InputSelectFocusbox from '../input-select-focusbox';\nimport InputMessage from '../input-message';\nimport InputSelect from '../input-select';\nimport InputOption from '../input-option';\nimport InputHint from '../input-hint';\nimport InputText from '../input-text';\nimport Icon from '../icon';\n\nconst Select = forwardRef(({\n  ariaLabel,\n  autoComplete,\n  caretIcon,\n  children,\n  className,\n  css,\n  disabled,\n  errorIcon,\n  errorText,\n  helpIcon,\n  helpText,\n  id = shortid.generate(),\n  invalid,\n  label,\n  onBlur,\n  onChange,\n  onFocus,\n  placeholder,\n  required,\n  readOnly,\n  showErrorText,\n  showHelpText,\n  ...remainingProps\n}, ref) => {\n  const [focused, setFocused] = useState();\n  const [filled, setFilled] = useState(Boolean(remainingProps.value) || Boolean(remainingProps.defaultValue));\n  const uniqueId = useRef(id);\n  const uid = uniqueId.current;\n\n  useEffect(() => {\n    setFilled(Boolean(remainingProps.defaultValue) || Boolean(remainingProps.value));\n  }, [remainingProps.defaultValue, remainingProps.value]);\n\n  const handleBlur = e => {\n    setFocused(false);\n    if (typeof onBlur === 'function') {\n      onBlur(e);\n    }\n  };\n\n  const handleChange = e => {\n    setFilled(e.target.value !== '');\n    if (typeof onChange === 'function') {\n      onChange(e);\n    }\n  };\n\n  const handleFocus = e => {\n    setFocused(true);\n    if (typeof onFocus === 'function') {\n      onFocus(e);\n    }\n  };\n\n  return (\n    <InputContainer\n      className={classnames(className)}\n      css={css}\n      disabled={disabled}\n      filled={filled}\n      focus={focused}\n      readOnly={readOnly}\n      invalid={invalid}\n    >\n      {label ? <InputLabel htmlFor={uid}>{label}</InputLabel> : undefined}\n      <InputBar>\n        { placeholder ? <InputHint>{placeholder}</InputHint> : undefined}\n        { readOnly ?\n          <InputText\n            aria-describedby={`input-message-help-${uid} input-message-error-${uid}`}\n            aria-label={label ? undefined : ariaLabel}\n            aria-invalid={invalid}\n            autoComplete={autoComplete}\n            id={uid}\n            disabled={disabled}\n            onBlur={handleBlur}\n            onFocus={handleFocus}\n            readOnly\n            required={required}\n            ref={ref}\n            {...remainingProps}\n          />\n          :\n          <InputSelect\n            aria-describedby={`input-message-help-${uid} input-message-error-${uid}`}\n            aria-label={label ? undefined : ariaLabel}\n            aria-invalid={invalid}\n            autoComplete={autoComplete}\n            id={uid}\n            disabled={disabled}\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            readOnly={readOnly}\n            ref={ref}\n            required={required}\n            {...remainingProps}\n          >\n            {children}\n          </InputSelect>\n        }\n        <InputOption>{caretIcon}</InputOption>\n      </InputBar>\n      <InputSelectFocusbox />\n      <InputMessage\n        id={`input-message-help-${uid}`}\n        invalid={invalid}\n        show\n      >\n      {\n        showHelpText && Boolean(helpText) && focused\n          ? <Fragment>{helpIcon} {helpText}</Fragment>\n          : ''\n      }\n      </InputMessage>\n      <InputMessage\n        id={`input-message-error-${uid}`}\n        invalid\n        show\n      >\n        {\n          invalid && Boolean(errorText)\n            ? <Fragment>{errorIcon} {errorText}</Fragment>\n            : ''\n        }\n      </InputMessage>\n    </InputContainer>\n  );\n});\n\nSelect.propTypes = {\n  /**\n   * Aria Label\n   */\n  ariaLabel: string,\n\n  /**\n   * AutoComplete\n   */\n  autoComplete: string,\n\n  /**\n   * Input Caret Icon\n   */\n  caretIcon: node,\n\n  /**\n  * @ignore\n  */\n  children: node,\n\n  /**\n   * @ignore\n   */\n  className: string,\n\n\n  /**\n   * @ignore\n   */\n  css: func,\n\n  /**\n   * Disabled\n   */\n  disabled: bool,\n\n  /**\n   * Input Message Icon\n   */\n  errorIcon: node,\n\n  /**\n   * Error Text\n   */\n  errorText: node,\n\n  /**\n   * Input Help Message Icon\n   */\n  helpIcon: node,\n\n  /**\n   * Input Help Message\n   */\n  helpText: node,\n\n  /**\n   * ID\n   */\n  id: oneOfType([number, string]),\n\n  /**\n   * Invalid\n   */\n  invalid: bool,\n\n  /**\n   * Label\n   */\n  label: node,\n\n  /**\n   * Callback fired when the input element loses focus.\n   */\n  onBlur: func,\n\n  /**\n   * On Change\n   */\n  onChange: func,\n\n  /**\n   * Callback fired when the input element is focused on.\n   */\n  onFocus: func,\n\n  /**\n   * Hint\n   */\n  placeholder: node,\n\n  /**\n   * ReadOnly\n   */\n  readOnly: bool,\n\n  /**\n    * Required\n    */\n  required: bool,\n\n  /**\n   * Show Error Message\n   */\n  showErrorText: bool,\n\n  /**\n   * Show Help Message\n   */\n  showHelpText: bool,\n\n  /**\n   * Value\n   */\n  value: string\n};\n\nSelect.defaultProps = {\n  autoComplete: 'off',\n  caretIcon: <Icon name=\"arrow-expand\" resolution=\"tiny\" />,\n  errorIcon: <Icon name=\"error\" resolution=\"tiny\" />,\n  helpIcon: <Icon name=\"info\" resolution=\"tiny\" />\n};\n\nSelect.displayName = 'Select';\n\nexport default Select;\n".replace("= memo(({","= React.forwardRef(({").replace("cloneElement(","React.cloneElement("),L='import React, { Fragment, useState, useRef } from \'react\';\nimport Alert from \'../../alert\';\nimport AlertIcon from \'../../alert-icon\';\nimport AlertLabel from \'../../alert-label\';\nimport ButtonText from \'../../button-text\';\nimport ButtonGroup from \'../../button-group\';\nimport Col from \'../../col\';\nimport Grid from \'../../grid\';\nimport Icon from \'../../icon\';\nimport Row from \'../../row\';\nimport ScreenReader from \'../../screen-reader\';\nimport Select from \'../../select\';\nimport SelectGroup from \'../../select-group\';\nimport SelectGroupDelimiter from \'../../select-group-delimiter\';\nimport Typography from \'../../typography\';\n\nconst SelectExample = () => {\n  const [stateOne, setStateOne] = useState({\n    touched: false,\n    valid: false,\n    validated: false,\n    value: \'\'\n  });\n\n  const refOneValidation = useRef();\n\n  const handleStateOne = e => {\n    setStateOne({\n      ...stateOne,\n      touched: true,\n      validated: false,\n      value: e.target.value\n    });\n  };\n\n  const handleStateOneSubmit = () => {\n    const valid = stateOne.value && stateOne.value.length > 0;\n\n    setStateOne({\n      ...stateOne,\n      touched: false,\n      valid,\n      validated: true\n    });\n\n    if (!valid) {\n      refOneValidation.current.focus();\n    }\n  };\n\n  const handleStateOneReset = () => {\n    setStateOne({\n      touched: false,\n      valid: false,\n      validated: false,\n      value: \'\'\n    });\n\n    refOneValidation.current.focus();\n  };\n\n  const [stateTwo, setStateTwo] = useState({\n    day: \'\',\n    errorText: \'Error: Please provide a valid Date of Birth\',\n    month: \'\',\n    showError: false,\n    touched: false,\n    valid: false,\n    validDay: false,\n    validMonth: false,\n    validYear: false,\n    validated: false,\n    validatedDay: false,\n    validatedMonth: false,\n    validatedYear: false,\n    year: \'\'\n  });\n\n  const refTwoValidationDay = useRef();\n  const refTwoValidationMonth = useRef();\n  const refTwoValidationYear = useRef();\n\n  const handleStateTwoDay = () => {\n    setStateTwo({\n      ...stateTwo,\n      validatedDay: true\n    });\n\n    handleStateTwo();\n  };\n\n  const handleStateTwoMonth = () => {\n    setStateTwo({\n      ...stateTwo,\n      validatedMonth: true\n    });\n\n    handleStateTwo();\n  };\n\n  const handleStateTwoYear = () => {\n    setStateTwo({\n      ...stateTwo,\n      validatedYear: true\n    });\n\n    handleStateTwo();\n  };\n\n  const handleStateTwo = () => {\n    const day = String(refTwoValidationDay.current.value);\n    const month = refTwoValidationMonth.current.value;\n    const year = String(refTwoValidationYear.current.value);\n\n    const validDay = day.length > 0;\n    const validMonth = month.length > 0;\n    const validYear = year.length > 0;\n\n    setStateTwo({\n      ...stateTwo,\n      day,\n      month,\n      touched: true,\n      validDay,\n      validMonth,\n      validYear,\n      validated: false,\n      year\n    });\n  };\n\n  const handleStateTwoSubmit = () => {\n    const test = stateTwo.validDay && stateTwo.validMonth && stateTwo.validYear;\n    const test2 = !stateTwo.validDay || !stateTwo.validMonth || !stateTwo.validYear;\n\n    let errorCommaIndex;\n    let errorString = \'Error: Please provide a valid \';\n    let errorCount = 0;\n    let errorArray = [\n      \'month\',\n      \'day\',\n      \'year\'\n    ];\n\n    errorArray.map((e, i) => { // eslint-disable-line\n      let validField = stateTwo[\'valid\' + e.substring(0,1).toUpperCase() + e.substring(1)];\n      if (!validField) {\n        errorString += e + \', \';\n        errorCount += 1;\n      }\n    });\n\n    errorCommaIndex = errorString.lastIndexOf(\', \');\n    errorString = errorString.substring(0, errorCommaIndex);\n\n    errorCommaIndex = errorString.lastIndexOf(\', \');\n\n    if (errorCount === 2) {\n      errorString = errorString.replace(\', \', \' and \');\n    } else if (errorCount === 3) {\n      errorString = errorString.substring(0, errorCommaIndex + 1) + \' and \' + errorString.substring(errorCommaIndex + 1);\n    }\n\n    setStateTwo({\n      ...stateTwo,\n      errorText: errorString,\n      showError: test2,\n      touched: false,\n      valid: test,\n      validated: true,\n      validatedDay: true,\n      validatedMonth: true,\n      validatedYear: true\n    });\n\n    // @TODO: focus on first invalid select\n    if (!stateTwo.valid) {\n      if (!stateTwo.validMonth) {\n        refTwoValidationMonth.current.focus();\n      } else if (!stateTwo.validDay) {\n        refTwoValidationDay.current.focus();\n      } else if (!stateTwo.validYear) {\n        refTwoValidationYear.current.focus();\n      }\n    }\n  };\n\n  const handleStateTwoReset = () => {\n    setStateTwo({\n      day: \'\',\n      errorText: \'Error: Please provide a valid Date of Birth\',\n      month: \'\',\n      showError: false,\n      touched: false,\n      valid: false,\n      validDay: false,\n      validMonth: false,\n      validYear: false,\n      validated: false,\n      validatedDay: false,\n      validatedMonth: false,\n      validatedYear: false,\n      year: \'\'\n    });\n\n    refTwoValidationMonth.current.focus();\n  };\n\n  return (\n    <Grid>\n      <Row>\n        <Col>\n          <Typography tag="h2">Select</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Alert position="relative" alertType="information">\n            <Grid>\n              <Row>\n                <Col>\n                  <AlertIcon>\n                    <Icon name="info" resolution="low" />\n                  </AlertIcon>\n                  <AlertLabel>\n                    Select takes all native React props directly, (e.g. onChange, etc)\n                  </AlertLabel>\n                </Col>\n              </Row>\n            </Grid>\n          </Alert>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Select\n            label="Card Type"\n            defaultValue=""\n          >\n            <option value="" disabled hidden />\n            <option value="silver_card">Silver Signature Card</option>\n            <option value="signature_card">Visa Signature Card</option>\n            <option value="platinum_card">Platinum Visa Card</option>\n            <option value="premium_card">Premium Card With An Unnecessarily Long Description</option>\n          </Select>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag="h3">Select (ReadOnly)</Typography>\n          <Select\n            label="Select Card"\n            readOnly\n            value="Visa Signature Card"\n          >\n            <option value="" disabled hidden />\n            <option value="silver_card">Silver Signature Card</option>\n            <option value="signature_card">Visa Signature Card</option>\n            <option value="platinum_card">Platinum Visa Card</option>\n            <option value="premium_card">Premium Card With An Unnecessarily Long Description</option>\n          </Select>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag="h3">Select (Disabled)</Typography>\n          <Select\n            disabled\n            label="Select Card"\n            value="signature_card"\n          >\n            <option value="" disabled />\n            <option value="silver_card">Silver Signature Card</option>\n            <option value="signature_card">Visa Signature Card</option>\n            <option value="platinum_card">Platinum Visa Card</option>\n            <option value="premium_card">Premium Card With An Unnecessarily Long Description</option>\n          </Select>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag="h3">Select with preselection</Typography>\n          <Select\n            label="Card Type"\n            defaultValue="signature_card"\n          >\n            <option value="silver_card">Silver Signature Card</option>\n            <option value="signature_card">Visa Signature Card</option>\n            <option value="platinum_card">Platinum Visa Card</option>\n            <option value="premium_card">Premium Card With An Unnecessarily Long Description</option>\n          </Select>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag="h3">Select with validation</Typography>\n          <Typography variant="caption">*=required</Typography>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Select\n            errorText="Error: A card type is required"\n            helpText={stateOne.valid ? "Successfully selected card type" : !stateOne.touched ? "Please select a card type" : \'\'}\n            invalid={stateOne.validated && !stateOne.valid}\n            label="Card Type *"\n            onChange={handleStateOne}\n            ref={refOneValidation}\n            required\n            showErrorText={!stateOne.valid}\n            showHelpText={Boolean(!stateOne.validated || stateOne.valid)}\n            value={stateOne.value}\n          >\n            <option value="" disabled hidden />\n            <option value="silver_card">Silver Signature Card</option>\n            <option value="signature_card">Visa Signature Card</option>\n            <option value="platinum_card">Platinum Visa Card</option>\n            <option value="premium_card">Premium Card With An Unnecessarily Long Description</option>\n          </Select>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ButtonGroup>\n            <ButtonText\n              colorScheme="secondary"\n              onClick={handleStateOneReset}\n            >\n              Reset\n            </ButtonText>\n            <ButtonText\n              onClick={handleStateOneSubmit}\n            >\n              Validate\n            </ButtonText>\n          </ButtonGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typography tag="h2">Select Group with validity states</Typography>\n          <Typography variant="caption">*=required</Typography>\n          <SelectGroup\n            errorText={stateTwo.showError ? stateTwo.errorText : \'\'}\n            helpText={stateTwo.valid ? "Successfully selected date of birth" : !stateTwo.touched ? "Please fill out your Date of Birth info field" : \'\'}\n            invalid={(!stateTwo.valid && stateTwo.validated) || !stateTwo.validMonth || !stateTwo.validDay || !stateTwo.validYear}\n            legend="Date of Birth"\n            showErrorText={stateTwo.showError}\n            showHelpText={Boolean(!stateTwo.validated || stateTwo.valid)}\n          >\n            <ScreenReader id="select-group-invalid-month">\n              { stateTwo.validated && !stateTwo.validMonth ? <Fragment>Error: Please select a valid month</Fragment> : null }\n            </ScreenReader>\n            <Select\n              aria-describedby="select-group-invalid-month"\n              invalid={!stateTwo.validMonth && stateTwo.validatedMonth}\n              label="Month *"\n              onChange={handleStateTwoMonth}\n              ref={refTwoValidationMonth}\n              required\n              showErrorText={false}\n              value={stateTwo.month}\n            >\n              <option value="" disabled hidden />\n              {\n                [\n                  \'January\',\n                  \'February\',\n                  \'March\',\n                  \'April\',\n                  \'May\',\n                  \'June\',\n                  \'July\',\n                  \'August\',\n                  \'September\',\n                  \'October\',\n                  \'November\',\n                  \'December\'\n                ].map((e, i) => (\n                  <option key={i} value={e.substring(0, 3).toLowerCase()}>{e}</option>\n                ))\n              }\n            </Select>\n            <SelectGroupDelimiter> / </SelectGroupDelimiter>\n            <ScreenReader id="select-group-invalid-day">\n              { stateTwo.validated && !stateTwo.validDay ? <Fragment>Error: Please select a valid day</Fragment> : null }\n            </ScreenReader>\n            <Select\n              aria-describedby="select-group-invalid-day"\n              invalid={!stateTwo.validDay && stateTwo.validatedDay}\n              label="Day *"\n              onChange={handleStateTwoDay}\n              ref={refTwoValidationDay}\n              required\n              showErrorText={false}\n              value={stateTwo.day}\n            >\n              <option value="" disabled hidden />\n              {\n                Array\n                  .from(new Array(31), (x, i) => (i + 1))\n                  .map((e, i) => (\n                    <option key={i} value={e}>{e}</option>\n                  ))\n              }\n            </Select>\n            <SelectGroupDelimiter> / </SelectGroupDelimiter>\n            <ScreenReader id="select-group-invalid-year">\n              { stateTwo.validated && !stateTwo.validYear ? <Fragment>Error: Please select a valid year</Fragment> : null }\n            </ScreenReader>\n            <Select\n              aria-describedby="select-group-invalid-year"\n              invalid={!stateTwo.validYear && stateTwo.validatedYear}\n              label="Year *"\n              onChange={handleStateTwoYear}\n              ref={refTwoValidationYear}\n              required\n              showErrorText={false}\n              value={stateTwo.year}\n            >\n              <option value="" disabled hidden />\n              {\n                Array\n                  .from(new Array((new Date()).getFullYear() - 1900), (x, i) => (i + 1900))\n                  .map((e, i) => (\n                    <option key={i} value={e}>{e}</option>\n                  ))\n              }\n            </Select>\n          </SelectGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ButtonGroup>\n            <ButtonText\n              colorScheme="secondary"\n              onClick={handleStateTwoReset}\n            >\n              Reset\n            </ButtonText>\n            <ButtonText\n              onClick={handleStateTwoSubmit}\n            >\n              Validate\n            </ButtonText>\n          </ButtonGroup>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nexport default SelectExample;\n'.replace(/'..\/..\//g,"'@visa/vds-react/"),q=function(e){var n=Object.assign({},e),a=Object(r.useState)({}),o=Object(t.a)(a,2),d=o[0],D=o[1];return Object(r.useEffect)((function(){try{D(j.parse(N))}catch(e){console.log("\n        React-docgen could not parse props for Select\n        check for fix here https://github.com/reactjs/react-docgen/issues/342")}}),[]),l.a.createElement(f.a,{siblingOfStickyFooter:!0},l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(O.a,{tag:"h1"},"Select"))),l.a.createElement(g.a,null,l.a.createElement(m.a,{role:"navigation","aria-label":"Secondary"},l.a.createElement(S.a,{role:"none"},l.a.createElement(E.a,{role:void 0,tag:l.a.createElement(p.c,{exact:!0,to:"".concat("/vds-react-1255","/components/select"),activeClassName:"vds-state--selected"})},l.a.createElement(h.a,{name:"log",resolution:"low"}),"Select Example"),l.a.createElement(E.a,{role:void 0,tag:l.a.createElement(p.c,{exact:!0,to:"".concat("/vds-react-1255","/components/select/code"),activeClassName:"vds-state--selected"})},l.a.createElement(h.a,{name:"code-fork-code-alt",resolution:"low"}),"JSX of Example"),l.a.createElement(E.a,{role:void 0,tag:l.a.createElement(p.c,{exact:!0,to:"".concat("/vds-react-1255","/components/select/html"),activeClassName:"vds-state--selected"})},l.a.createElement(h.a,{name:"code-fork-code-alt",resolution:"low"}),"HTML of Example")))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement("div",{className:c()({"vds-state--hidden":n.match.path!=="".concat("/vds-react-1255","/components/select"),"vds-state--show":n.match.path==="".concat("/vds-react-1255","/components/select")})},l.a.createElement(F,n)),l.a.createElement("div",{className:c()({"vds-state--hidden":n.match.path!=="".concat("/vds-react-1255","/components/select/code"),"vds-state--show":n.match.path==="".concat("/vds-react-1255","/components/select/code")})},l.a.createElement(s.a,Object.assign({},s.b,{theme:u.a,code:L,language:"jsx"}),(function(e){var n=e.className,a=e.style,t=e.tokens,r=e.getLineProps,o=e.getTokenProps;return(l.a.createElement("pre",{className:n,style:a},t.map((function(e,n){return l.a.createElement("div",Object.assign({},r({key:n,line:e}),{key:n}),l.a.createElement("span",{style:{display:"inline-block",opacity:"0.3",userSelect:"none",width:"2em"}},n+1),e.map((function(e,n){return l.a.createElement("span",Object.assign({},o({key:n,token:e}),{key:n}))})))}))))}))),l.a.createElement("div",{className:c()({"vds-state--hidden":n.match.path!=="".concat("/vds-react-1255","/components/select/html"),"vds-state--show":n.match.path==="".concat("/vds-react-1255","/components/select/html")})},l.a.createElement(s.a,Object.assign({},s.b,{theme:u.a,code:A.format(i.a.renderToStaticMarkup(l.a.createElement(F,n)),{css:"ignore",parser:"html",plugins:Y,printWidth:120}),language:"html"}),(function(e){var n=e.className,a=e.style,t=e.tokens,r=e.getLineProps,o=e.getTokenProps;return(l.a.createElement("pre",{className:n,style:a},t.map((function(e,n){return l.a.createElement("div",Object.assign({},r({key:n,line:e}),{key:n}),l.a.createElement("span",{style:{display:"inline-block",opacity:"0.3",userSelect:"none",width:"2em"}},n+1),e.map((function(e,n){return l.a.createElement("span",Object.assign({},o({key:n,token:e}),{key:n}))})))}))))}))))),l.a.createElement(g.a,null,l.a.createElement(m.a,null,l.a.createElement(v.a,{className:c()(["components"]),dividerLines:!0,size:"compact"},l.a.createElement(y.a,{tag:"caption"},"Props"),l.a.createElement(C.a,null,l.a.createElement(x.a,{className:"vds-tr"},l.a.createElement(T.a,{"aria-sort":"none",role:"columnheader",scope:"col"},"Prop"),l.a.createElement(T.a,{"aria-sort":"none",role:"columnheader",scope:"col"},"Type"),l.a.createElement(T.a,{"aria-sort":"none",role:"columnheader",scope:"col"},"Default"),l.a.createElement(T.a,{"aria-sort":"none",role:"columnheader",scope:"col"},"Description"))),l.a.createElement(w.a,null,d.props&&Object.entries(d.props).filter((function(e){return"@ignore"!==e[1].description})).map((function(e,n){return l.a.createElement(x.a,{className:"vds-tr",key:n},l.a.createElement(T.a,{className:"vds-td",scope:"row"},e[0]," ",e[1].required?l.a.createElement("strong",null," - required"):""),l.a.createElement(b.a,{className:"vds-td"},l.a.createElement("strong",null,e[1].type.name),e[1].type.value&&e[1].type.value.length?l.a.createElement("small",{style:{color:"#1a1f71"}},l.a.createElement("br",null),Array.isArray(e[1].type.value)?e[1].type.value.map((function(e){return e.value||e.name})).join(", "):"string"===typeof e[1].type.value?e[1].type.value:void 0):""),l.a.createElement(b.a,{className:"vds-td"},e[1].defaultValue?e[1].defaultValue.value:""),l.a.createElement(b.a,{className:"vds-td"},e[1].description))})))))))};q.displayName="SelectExample";n.default=q},580:function(e,n,a){"use strict";var t=a(4),r=a(5),l=a(0),o=a.n(l),i=a(2),d=a.n(i),c=function(e){var n=e.children,a=e.className,l=e.direction,i=Object(r.a)(e,["children","className","direction"]);return(o.a.createElement("div",Object.assign({className:d()("vds-btn-group",Object(t.a)({},"".concat("vds-btn-group","--").concat(l),Boolean(l)),a)},i),n))};c.displayName="ButtonGroup",n.a=c}}]);
//# sourceMappingURL=69.53adf026.chunk.js.map